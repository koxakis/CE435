// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="array_io,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.390000,HLS_SYN_LAT=129,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=202,HLS_SYN_LUT=71}" *)

module array_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_o_address0,
        d_o_ce0,
        d_o_we0,
        d_o_d0,
        d_i_address0,
        d_i_ce0,
        d_i_q0
);

parameter    ap_ST_fsm_state1 = 5'b1;
parameter    ap_ST_fsm_state2 = 5'b10;
parameter    ap_ST_fsm_state3 = 5'b100;
parameter    ap_ST_fsm_state4 = 5'b1000;
parameter    ap_ST_fsm_state5 = 5'b10000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv6_0 = 6'b000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv6_20 = 6'b100000;
parameter    ap_const_lv6_1 = 6'b1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [4:0] d_o_address0;
output   d_o_ce0;
output   d_o_we0;
output  [15:0] d_o_d0;
output  [4:0] d_i_address0;
output   d_i_ce0;
input  [15:0] d_i_q0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg d_o_ce0;
reg d_o_we0;
reg d_i_ce0;

(* fsm_encoding = "none" *) reg   [4:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [2:0] acc_address0;
reg    acc_ce0;
reg    acc_we0;
wire   [31:0] acc_q0;
wire   [5:0] i_1_fu_85_p2;
reg   [5:0] i_1_reg_120;
wire   [0:0] ap_CS_fsm_state2;
reg   [2:0] acc_addr_reg_125;
wire   [0:0] exitcond_fu_79_p2;
wire   [63:0] tmp_1_fu_96_p1;
reg   [63:0] tmp_1_reg_130;
reg   [31:0] acc_load_reg_140;
wire   [0:0] ap_CS_fsm_state3;
reg   [15:0] d_i_load_reg_145;
wire   [15:0] tmp_6_fu_101_p1;
reg   [15:0] tmp_6_reg_151;
wire   [31:0] tmp_3_fu_108_p2;
reg   [31:0] tmp_3_reg_156;
wire   [0:0] ap_CS_fsm_state4;
wire   [15:0] tmp_4_fu_113_p2;
reg   [15:0] tmp_4_reg_161;
reg   [5:0] i_reg_64;
wire   [0:0] ap_CS_fsm_state5;
wire   [63:0] tmp_fu_91_p1;
wire   [2:0] rem_fu_75_p1;
wire  signed [31:0] tmp_2_fu_105_p1;
reg   [4:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 5'b1;
end

array_io_acc #(
    .DataWidth( 32 ),
    .AddressRange( 8 ),
    .AddressWidth( 3 ))
acc_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_address0),
    .ce0(acc_ce0),
    .we0(acc_we0),
    .d0(tmp_3_reg_156),
    .q0(acc_q0)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        i_reg_64 <= i_1_reg_120;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_64 <= ap_const_lv6_0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (exitcond_fu_79_p2 == 1'b0))) begin
        acc_addr_reg_125 <= tmp_fu_91_p1;
        tmp_1_reg_130[5 : 0] <= tmp_1_fu_96_p1[5 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        acc_load_reg_140 <= acc_q0;
        d_i_load_reg_145 <= d_i_q0;
        tmp_6_reg_151 <= tmp_6_fu_101_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        i_1_reg_120 <= i_1_fu_85_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        tmp_3_reg_156 <= tmp_3_fu_108_p2;
        tmp_4_reg_161 <= tmp_4_fu_113_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_address0 = acc_addr_reg_125;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        acc_address0 = tmp_fu_91_p1;
    end else begin
        acc_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state5))) begin
        acc_ce0 = 1'b1;
    end else begin
        acc_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        acc_we0 = 1'b1;
    end else begin
        acc_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond_fu_79_p2 == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(exitcond_fu_79_p2 == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        d_i_ce0 = 1'b1;
    end else begin
        d_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_o_ce0 = 1'b1;
    end else begin
        d_o_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        d_o_we0 = 1'b1;
    end else begin
        d_o_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(exitcond_fu_79_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign d_i_address0 = tmp_1_fu_96_p1;

assign d_o_address0 = tmp_1_reg_130;

assign d_o_d0 = tmp_4_reg_161;

assign exitcond_fu_79_p2 = ((i_reg_64 == ap_const_lv6_20) ? 1'b1 : 1'b0);

assign i_1_fu_85_p2 = (ap_const_lv6_1 + i_reg_64);

assign rem_fu_75_p1 = i_reg_64[2:0];

assign tmp_1_fu_96_p1 = i_reg_64;

assign tmp_2_fu_105_p1 = $signed(d_i_load_reg_145);

assign tmp_3_fu_108_p2 = ($signed(acc_load_reg_140) + $signed(tmp_2_fu_105_p1));

assign tmp_4_fu_113_p2 = (d_i_load_reg_145 + tmp_6_reg_151);

assign tmp_6_fu_101_p1 = acc_q0[15:0];

assign tmp_fu_91_p1 = rem_fu_75_p1;

always @ (posedge ap_clk) begin
    tmp_1_reg_130[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
end

endmodule //array_io
