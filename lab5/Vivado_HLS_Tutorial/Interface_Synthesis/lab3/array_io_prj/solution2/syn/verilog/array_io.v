// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="array_io,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.980000,HLS_SYN_LAT=33,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=1346,HLS_SYN_LUT=1319}" *)

module array_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_o_din,
        d_o_full_n,
        d_o_write,
        d_i_address0,
        d_i_ce0,
        d_i_q0,
        d_i_address1,
        d_i_ce1,
        d_i_q1
);

parameter    ap_ST_fsm_state1 = 34'b1;
parameter    ap_ST_fsm_state2 = 34'b10;
parameter    ap_ST_fsm_state3 = 34'b100;
parameter    ap_ST_fsm_state4 = 34'b1000;
parameter    ap_ST_fsm_state5 = 34'b10000;
parameter    ap_ST_fsm_state6 = 34'b100000;
parameter    ap_ST_fsm_state7 = 34'b1000000;
parameter    ap_ST_fsm_state8 = 34'b10000000;
parameter    ap_ST_fsm_state9 = 34'b100000000;
parameter    ap_ST_fsm_state10 = 34'b1000000000;
parameter    ap_ST_fsm_state11 = 34'b10000000000;
parameter    ap_ST_fsm_state12 = 34'b100000000000;
parameter    ap_ST_fsm_state13 = 34'b1000000000000;
parameter    ap_ST_fsm_state14 = 34'b10000000000000;
parameter    ap_ST_fsm_state15 = 34'b100000000000000;
parameter    ap_ST_fsm_state16 = 34'b1000000000000000;
parameter    ap_ST_fsm_state17 = 34'b10000000000000000;
parameter    ap_ST_fsm_state18 = 34'b100000000000000000;
parameter    ap_ST_fsm_state19 = 34'b1000000000000000000;
parameter    ap_ST_fsm_state20 = 34'b10000000000000000000;
parameter    ap_ST_fsm_state21 = 34'b100000000000000000000;
parameter    ap_ST_fsm_state22 = 34'b1000000000000000000000;
parameter    ap_ST_fsm_state23 = 34'b10000000000000000000000;
parameter    ap_ST_fsm_state24 = 34'b100000000000000000000000;
parameter    ap_ST_fsm_state25 = 34'b1000000000000000000000000;
parameter    ap_ST_fsm_state26 = 34'b10000000000000000000000000;
parameter    ap_ST_fsm_state27 = 34'b100000000000000000000000000;
parameter    ap_ST_fsm_state28 = 34'b1000000000000000000000000000;
parameter    ap_ST_fsm_state29 = 34'b10000000000000000000000000000;
parameter    ap_ST_fsm_state30 = 34'b100000000000000000000000000000;
parameter    ap_ST_fsm_state31 = 34'b1000000000000000000000000000000;
parameter    ap_ST_fsm_state32 = 34'b10000000000000000000000000000000;
parameter    ap_ST_fsm_state33 = 34'b100000000000000000000000000000000;
parameter    ap_ST_fsm_state34 = 34'b1000000000000000000000000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv32_E = 32'b1110;
parameter    ap_const_lv32_F = 32'b1111;
parameter    ap_const_lv32_10 = 32'b10000;
parameter    ap_const_lv32_11 = 32'b10001;
parameter    ap_const_lv32_12 = 32'b10010;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_14 = 32'b10100;
parameter    ap_const_lv32_15 = 32'b10101;
parameter    ap_const_lv32_16 = 32'b10110;
parameter    ap_const_lv32_17 = 32'b10111;
parameter    ap_const_lv32_18 = 32'b11000;
parameter    ap_const_lv32_19 = 32'b11001;
parameter    ap_const_lv32_1A = 32'b11010;
parameter    ap_const_lv32_1B = 32'b11011;
parameter    ap_const_lv32_1C = 32'b11100;
parameter    ap_const_lv32_1D = 32'b11101;
parameter    ap_const_lv32_1E = 32'b11110;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv32_20 = 32'b100000;
parameter    ap_const_lv32_21 = 32'b100001;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv64_F = 64'b1111;
parameter    ap_const_lv64_10 = 64'b10000;
parameter    ap_const_lv64_11 = 64'b10001;
parameter    ap_const_lv64_12 = 64'b10010;
parameter    ap_const_lv64_13 = 64'b10011;
parameter    ap_const_lv64_14 = 64'b10100;
parameter    ap_const_lv64_15 = 64'b10101;
parameter    ap_const_lv64_16 = 64'b10110;
parameter    ap_const_lv64_17 = 64'b10111;
parameter    ap_const_lv64_18 = 64'b11000;
parameter    ap_const_lv64_19 = 64'b11001;
parameter    ap_const_lv64_1A = 64'b11010;
parameter    ap_const_lv64_1B = 64'b11011;
parameter    ap_const_lv64_1C = 64'b11100;
parameter    ap_const_lv64_1D = 64'b11101;
parameter    ap_const_lv64_1E = 64'b11110;
parameter    ap_const_lv64_1F = 64'b11111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] d_o_din;
input   d_o_full_n;
output   d_o_write;
output  [4:0] d_i_address0;
output   d_i_ce0;
input  [15:0] d_i_q0;
output  [4:0] d_i_address1;
output   d_i_ce1;
input  [15:0] d_i_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] d_o_din;
reg d_o_write;
reg[4:0] d_i_address0;
reg d_i_ce0;
reg[4:0] d_i_address1;
reg d_i_ce1;

(* fsm_encoding = "none" *) reg   [33:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] acc_0;
reg   [31:0] acc_1;
reg   [31:0] acc_2;
reg   [31:0] acc_3;
reg   [31:0] acc_4;
reg   [31:0] acc_5;
reg   [31:0] acc_6;
reg   [31:0] acc_7;
reg    d_o_blk_n;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state14;
wire   [0:0] ap_CS_fsm_state15;
wire   [0:0] ap_CS_fsm_state16;
wire   [0:0] ap_CS_fsm_state17;
wire   [0:0] ap_CS_fsm_state18;
wire   [0:0] ap_CS_fsm_state19;
wire   [0:0] ap_CS_fsm_state20;
wire   [0:0] ap_CS_fsm_state21;
wire   [0:0] ap_CS_fsm_state22;
wire   [0:0] ap_CS_fsm_state23;
wire   [0:0] ap_CS_fsm_state24;
wire   [0:0] ap_CS_fsm_state25;
wire   [0:0] ap_CS_fsm_state26;
wire   [0:0] ap_CS_fsm_state27;
wire   [0:0] ap_CS_fsm_state28;
wire   [0:0] ap_CS_fsm_state29;
wire   [0:0] ap_CS_fsm_state30;
wire   [0:0] ap_CS_fsm_state31;
wire   [0:0] ap_CS_fsm_state32;
wire   [0:0] ap_CS_fsm_state33;
wire   [0:0] ap_CS_fsm_state34;
reg   [15:0] reg_408;
wire   [0:0] ap_CS_fsm_state2;
reg   [15:0] reg_412;
reg   [15:0] reg_416;
reg   [15:0] reg_420;
reg   [15:0] reg_424;
reg   [15:0] reg_428;
wire   [15:0] tmp_s_fu_440_p2;
reg   [15:0] tmp_s_reg_1082;
wire   [15:0] tmp_4_1_fu_455_p2;
reg   [15:0] tmp_4_1_reg_1102;
reg   [15:0] d_i_load_4_reg_1107;
reg   [15:0] d_i_load_5_reg_1113;
wire   [15:0] tmp_4_2_fu_470_p2;
reg   [15:0] tmp_4_2_reg_1134;
reg   [15:0] d_i_load_6_reg_1139;
reg   [15:0] d_i_load_7_reg_1145;
wire   [15:0] tmp_4_3_fu_485_p2;
reg   [15:0] tmp_4_3_reg_1166;
wire   [15:0] tmp_4_4_fu_500_p2;
reg   [15:0] tmp_4_4_reg_1186;
reg   [15:0] d_i_load_10_reg_1191;
reg   [15:0] d_i_load_11_reg_1197;
wire   [15:0] tmp_4_5_fu_514_p2;
reg   [15:0] tmp_4_5_reg_1218;
reg   [15:0] d_i_load_12_reg_1223;
reg   [15:0] d_i_load_13_reg_1229;
wire   [15:0] tmp_4_6_fu_528_p2;
reg   [15:0] tmp_4_6_reg_1250;
reg   [15:0] d_i_load_14_reg_1255;
reg   [15:0] d_i_load_15_reg_1261;
wire   [15:0] tmp_4_7_fu_542_p2;
reg   [15:0] tmp_4_7_reg_1282;
reg   [15:0] d_i_load_16_reg_1287;
reg   [15:0] d_i_load_17_reg_1293;
wire   [15:0] tmp_4_8_fu_548_p2;
reg   [15:0] tmp_4_8_reg_1309;
reg   [15:0] d_i_load_18_reg_1314;
reg   [15:0] d_i_load_19_reg_1320;
wire   [15:0] tmp_4_9_fu_554_p2;
reg   [15:0] tmp_4_9_reg_1336;
reg   [15:0] d_i_load_20_reg_1341;
reg   [15:0] d_i_load_21_reg_1347;
wire   [15:0] tmp_4_s_fu_560_p2;
reg   [15:0] tmp_4_s_reg_1363;
reg   [15:0] d_i_load_22_reg_1368;
reg   [15:0] d_i_load_23_reg_1374;
wire   [15:0] tmp_4_10_fu_565_p2;
reg   [15:0] tmp_4_10_reg_1390;
reg   [15:0] d_i_load_24_reg_1395;
reg   [15:0] d_i_load_25_reg_1401;
wire   [15:0] tmp_4_11_fu_578_p2;
reg   [15:0] tmp_4_11_reg_1417;
wire   [15:0] tmp_4_15_fu_586_p2;
reg   [15:0] tmp_4_15_reg_1422;
wire   [15:0] tmp_4_16_fu_593_p2;
reg   [15:0] tmp_4_16_reg_1428;
wire   [17:0] tmp2_fu_610_p2;
reg   [17:0] tmp2_reg_1434;
wire   [17:0] tmp5_fu_629_p2;
reg   [17:0] tmp5_reg_1439;
wire   [15:0] tmp_4_12_fu_649_p2;
reg   [15:0] tmp_4_12_reg_1454;
wire   [15:0] tmp_4_17_fu_657_p2;
reg   [15:0] tmp_4_17_reg_1459;
wire   [15:0] tmp_4_18_fu_664_p2;
reg   [15:0] tmp_4_18_reg_1465;
wire   [17:0] tmp8_fu_722_p2;
reg   [17:0] tmp8_reg_1471;
wire   [17:0] tmp11_fu_742_p2;
reg   [17:0] tmp11_reg_1476;
wire   [15:0] tmp_4_13_fu_762_p2;
reg   [15:0] tmp_4_13_reg_1491;
wire   [15:0] tmp_4_19_fu_770_p2;
reg   [15:0] tmp_4_19_reg_1496;
wire   [15:0] tmp_4_20_fu_777_p2;
reg   [15:0] tmp_4_20_reg_1502;
wire   [17:0] tmp14_fu_835_p2;
reg   [17:0] tmp14_reg_1508;
wire   [17:0] tmp17_fu_855_p2;
reg   [17:0] tmp17_reg_1513;
wire   [15:0] tmp_4_21_fu_881_p2;
reg   [15:0] tmp_4_21_reg_1518;
wire   [15:0] tmp_4_22_fu_888_p2;
reg   [15:0] tmp_4_22_reg_1524;
wire   [17:0] tmp20_fu_947_p2;
reg   [17:0] tmp20_reg_1530;
wire   [17:0] tmp23_fu_967_p2;
reg   [17:0] tmp23_reg_1535;
wire   [15:0] tmp_4_23_fu_979_p2;
reg   [15:0] tmp_4_23_reg_1540;
wire   [15:0] tmp_4_24_fu_1023_p2;
reg   [15:0] tmp_4_24_reg_1545;
wire   [15:0] tmp_4_25_fu_1027_p2;
reg   [15:0] tmp_4_25_reg_1550;
wire   [15:0] tmp_4_26_fu_1032_p2;
reg   [15:0] tmp_4_26_reg_1555;
wire   [15:0] tmp_4_27_fu_1037_p2;
reg   [15:0] tmp_4_27_reg_1560;
wire   [15:0] tmp_4_28_fu_1042_p2;
reg   [15:0] tmp_4_28_reg_1565;
wire   [15:0] tmp_4_29_fu_1047_p2;
reg   [15:0] tmp_4_29_reg_1570;
wire   [15:0] tmp_4_30_fu_1052_p2;
reg   [15:0] tmp_4_30_reg_1575;
wire   [15:0] tmp_4_14_fu_873_p2;
wire   [31:0] tmp_3_s_fu_676_p2;
wire   [31:0] tmp_3_1_fu_696_p2;
wire   [31:0] tmp_3_2_fu_789_p2;
wire   [31:0] tmp_3_3_fu_809_p2;
wire   [31:0] tmp_3_4_fu_901_p2;
wire   [31:0] tmp_3_5_fu_921_p2;
wire   [31:0] tmp_3_6_fu_991_p2;
wire   [31:0] tmp_3_7_fu_1011_p2;
wire   [15:0] tmp_fu_436_p1;
wire   [15:0] tmp_1_fu_451_p1;
wire   [15:0] tmp_3_fu_466_p1;
wire   [15:0] tmp_4_fu_481_p1;
wire   [15:0] tmp_5_fu_496_p1;
wire   [15:0] tmp_6_fu_510_p1;
wire   [15:0] tmp_7_fu_524_p1;
wire   [15:0] tmp_8_fu_538_p1;
wire  signed [16:0] tmp_2_15_cast_fu_583_p1;
wire  signed [16:0] tmp_2_23_cast_fu_597_p1;
wire   [16:0] tmp3_fu_600_p2;
wire  signed [17:0] tmp3_cast_fu_606_p1;
wire  signed [17:0] tmp_2_8_cast_fu_570_p1;
wire  signed [16:0] tmp_2_16_cast_fu_590_p1;
wire  signed [16:0] tmp_2_24_cast_fu_616_p1;
wire   [16:0] tmp6_fu_619_p2;
wire  signed [17:0] tmp6_cast_fu_625_p1;
wire  signed [17:0] tmp_2_9_cast_fu_574_p1;
wire  signed [31:0] tmp_2_fu_635_p1;
wire  signed [31:0] tmp2_cast_fu_673_p1;
wire   [31:0] tmp1_fu_668_p2;
wire  signed [31:0] tmp_2_1_fu_639_p1;
wire  signed [31:0] tmp5_cast_fu_693_p1;
wire   [31:0] tmp4_fu_688_p2;
wire  signed [16:0] tmp_2_17_cast_fu_654_p1;
wire  signed [16:0] tmp_2_25_cast_fu_708_p1;
wire   [16:0] tmp9_fu_712_p2;
wire  signed [17:0] tmp9_cast_fu_718_p1;
wire  signed [17:0] tmp_2_cast_fu_643_p1;
wire  signed [16:0] tmp_2_18_cast_fu_661_p1;
wire  signed [16:0] tmp_2_26_cast_fu_728_p1;
wire   [16:0] tmp12_fu_732_p2;
wire  signed [17:0] tmp12_cast_fu_738_p1;
wire  signed [17:0] tmp_2_10_cast_fu_646_p1;
wire  signed [31:0] tmp_2_2_fu_748_p1;
wire  signed [31:0] tmp8_cast_fu_786_p1;
wire   [31:0] tmp7_fu_781_p2;
wire  signed [31:0] tmp_2_3_fu_752_p1;
wire  signed [31:0] tmp11_cast_fu_806_p1;
wire   [31:0] tmp10_fu_801_p2;
wire  signed [16:0] tmp_2_19_cast_fu_767_p1;
wire  signed [16:0] tmp_2_27_cast_fu_821_p1;
wire   [16:0] tmp15_fu_825_p2;
wire  signed [17:0] tmp15_cast_fu_831_p1;
wire  signed [17:0] tmp_2_11_cast_fu_756_p1;
wire  signed [16:0] tmp_2_20_cast_fu_774_p1;
wire  signed [16:0] tmp_2_28_cast_fu_841_p1;
wire   [16:0] tmp18_fu_845_p2;
wire  signed [17:0] tmp18_cast_fu_851_p1;
wire  signed [17:0] tmp_2_12_cast_fu_759_p1;
wire  signed [31:0] tmp_2_4_fu_861_p1;
wire  signed [31:0] tmp14_cast_fu_898_p1;
wire   [31:0] tmp13_fu_893_p2;
wire  signed [31:0] tmp_2_5_fu_864_p1;
wire  signed [31:0] tmp17_cast_fu_918_p1;
wire   [31:0] tmp16_fu_913_p2;
wire  signed [16:0] tmp_2_21_cast_fu_878_p1;
wire  signed [16:0] tmp_2_29_cast_fu_933_p1;
wire   [16:0] tmp21_fu_937_p2;
wire  signed [17:0] tmp21_cast_fu_943_p1;
wire  signed [17:0] tmp_2_13_cast_fu_867_p1;
wire  signed [16:0] tmp_2_22_cast_fu_885_p1;
wire  signed [16:0] tmp_2_30_cast_fu_953_p1;
wire   [16:0] tmp24_fu_957_p2;
wire  signed [17:0] tmp24_cast_fu_963_p1;
wire  signed [17:0] tmp_2_14_cast_fu_870_p1;
wire  signed [31:0] tmp_2_6_fu_973_p1;
wire  signed [31:0] tmp20_cast_fu_988_p1;
wire   [31:0] tmp19_fu_983_p2;
wire  signed [31:0] tmp_2_7_fu_976_p1;
wire  signed [31:0] tmp23_cast_fu_1008_p1;
wire   [31:0] tmp22_fu_1003_p2;
reg   [33:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 34'b1;
#0 acc_0 = 32'b00000000000000000000000000000000;
#0 acc_1 = 32'b00000000000000000000000000000000;
#0 acc_2 = 32'b00000000000000000000000000000000;
#0 acc_3 = 32'b00000000000000000000000000000000;
#0 acc_4 = 32'b00000000000000000000000000000000;
#0 acc_5 = 32'b00000000000000000000000000000000;
#0 acc_6 = 32'b00000000000000000000000000000000;
#0 acc_7 = 32'b00000000000000000000000000000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state16) & ~(d_o_full_n == 1'b0))) begin
        acc_0 <= tmp_3_s_fu_676_p2;
        acc_1 <= tmp_3_1_fu_696_p2;
        tmp11_reg_1476 <= tmp11_fu_742_p2;
        tmp8_reg_1471 <= tmp8_fu_722_p2;
        tmp_4_12_reg_1454 <= tmp_4_12_fu_649_p2;
        tmp_4_17_reg_1459 <= tmp_4_17_fu_657_p2;
        tmp_4_18_reg_1465 <= tmp_4_18_fu_664_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state17) & ~(d_o_full_n == 1'b0))) begin
        acc_2 <= tmp_3_2_fu_789_p2;
        acc_3 <= tmp_3_3_fu_809_p2;
        tmp14_reg_1508 <= tmp14_fu_835_p2;
        tmp17_reg_1513 <= tmp17_fu_855_p2;
        tmp_4_13_reg_1491 <= tmp_4_13_fu_762_p2;
        tmp_4_19_reg_1496 <= tmp_4_19_fu_770_p2;
        tmp_4_20_reg_1502 <= tmp_4_20_fu_777_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state18) & ~(d_o_full_n == 1'b0))) begin
        acc_4 <= tmp_3_4_fu_901_p2;
        acc_5 <= tmp_3_5_fu_921_p2;
        tmp20_reg_1530 <= tmp20_fu_947_p2;
        tmp23_reg_1535 <= tmp23_fu_967_p2;
        tmp_4_21_reg_1518 <= tmp_4_21_fu_881_p2;
        tmp_4_22_reg_1524 <= tmp_4_22_fu_888_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state19) & ~(d_o_full_n == 1'b0))) begin
        acc_6 <= tmp_3_6_fu_991_p2;
        acc_7 <= tmp_3_7_fu_1011_p2;
        tmp_4_23_reg_1540 <= tmp_4_23_fu_979_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_10_reg_1191 <= d_i_q0;
        d_i_load_11_reg_1197 <= d_i_q1;
        tmp_4_4_reg_1186 <= tmp_4_4_fu_500_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_12_reg_1223 <= d_i_q0;
        d_i_load_13_reg_1229 <= d_i_q1;
        tmp_4_5_reg_1218 <= tmp_4_5_fu_514_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_14_reg_1255 <= d_i_q0;
        d_i_load_15_reg_1261 <= d_i_q1;
        tmp_4_6_reg_1250 <= tmp_4_6_fu_528_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_16_reg_1287 <= d_i_q0;
        d_i_load_17_reg_1293 <= d_i_q1;
        tmp_4_7_reg_1282 <= tmp_4_7_fu_542_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_18_reg_1314 <= d_i_q0;
        d_i_load_19_reg_1320 <= d_i_q1;
        tmp_4_8_reg_1309 <= tmp_4_8_fu_548_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_20_reg_1341 <= d_i_q0;
        d_i_load_21_reg_1347 <= d_i_q1;
        tmp_4_9_reg_1336 <= tmp_4_9_fu_554_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_22_reg_1368 <= d_i_q0;
        d_i_load_23_reg_1374 <= d_i_q1;
        tmp_4_s_reg_1363 <= tmp_4_s_fu_560_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_24_reg_1395 <= d_i_q0;
        d_i_load_25_reg_1401 <= d_i_q1;
        tmp_4_10_reg_1390 <= tmp_4_10_fu_565_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_4_reg_1107 <= d_i_q0;
        d_i_load_5_reg_1113 <= d_i_q1;
        tmp_4_1_reg_1102 <= tmp_4_1_fu_455_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(d_o_full_n == 1'b0))) begin
        d_i_load_6_reg_1139 <= d_i_q0;
        d_i_load_7_reg_1145 <= d_i_q1;
        tmp_4_2_reg_1134 <= tmp_4_2_fu_470_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state16) & ~(d_o_full_n == 1'b0)))) begin
        reg_408 <= d_i_q0;
        reg_412 <= d_i_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state3) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state17) & ~(d_o_full_n == 1'b0)))) begin
        reg_416 <= d_i_q0;
        reg_420 <= d_i_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state6) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state15) & ~(d_o_full_n == 1'b0)))) begin
        reg_424 <= d_i_q0;
        reg_428 <= d_i_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state15) & ~(d_o_full_n == 1'b0))) begin
        tmp2_reg_1434 <= tmp2_fu_610_p2;
        tmp5_reg_1439 <= tmp5_fu_629_p2;
        tmp_4_11_reg_1417 <= tmp_4_11_fu_578_p2;
        tmp_4_15_reg_1422 <= tmp_4_15_fu_586_p2;
        tmp_4_16_reg_1428 <= tmp_4_16_fu_593_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state20) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_24_reg_1545 <= tmp_4_24_fu_1023_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state21) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_25_reg_1550 <= tmp_4_25_fu_1027_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state22) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_26_reg_1555 <= tmp_4_26_fu_1032_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state23) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_27_reg_1560 <= tmp_4_27_fu_1037_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state24) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_28_reg_1565 <= tmp_4_28_fu_1042_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state25) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_29_reg_1570 <= tmp_4_29_fu_1047_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state26) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_30_reg_1575 <= tmp_4_30_fu_1052_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(d_o_full_n == 1'b0))) begin
        tmp_4_3_reg_1166 <= tmp_4_3_fu_485_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(d_o_full_n == 1'b0))) begin
        tmp_s_reg_1082 <= tmp_s_fu_440_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(d_o_full_n == 1'b0))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state34) & ~(d_o_full_n == 1'b0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        d_i_address0 = ap_const_lv64_1E;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        d_i_address0 = ap_const_lv64_1C;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        d_i_address0 = ap_const_lv64_1A;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        d_i_address0 = ap_const_lv64_18;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        d_i_address0 = ap_const_lv64_16;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_i_address0 = ap_const_lv64_14;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        d_i_address0 = ap_const_lv64_12;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        d_i_address0 = ap_const_lv64_10;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        d_i_address0 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_i_address0 = ap_const_lv64_C;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        d_i_address0 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        d_i_address0 = ap_const_lv64_8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_i_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_i_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_i_address0 = ap_const_lv64_2;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        d_i_address0 = ap_const_lv64_0;
    end else begin
        d_i_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state16)) begin
        d_i_address1 = ap_const_lv64_1F;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        d_i_address1 = ap_const_lv64_1D;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        d_i_address1 = ap_const_lv64_1B;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        d_i_address1 = ap_const_lv64_19;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        d_i_address1 = ap_const_lv64_17;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        d_i_address1 = ap_const_lv64_15;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        d_i_address1 = ap_const_lv64_13;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        d_i_address1 = ap_const_lv64_11;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        d_i_address1 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_i_address1 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        d_i_address1 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        d_i_address1 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_i_address1 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_i_address1 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_i_address1 = ap_const_lv64_3;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        d_i_address1 = ap_const_lv64_1;
    end else begin
        d_i_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state16) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state3) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state15) & ~(d_o_full_n == 1'b0)) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state8) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state9) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state10) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state13) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state14) & ~(d_o_full_n == 1'b0)))) begin
        d_i_ce0 = 1'b1;
    end else begin
        d_i_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state16) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state3) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state15) & ~(d_o_full_n == 1'b0)) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state8) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state9) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state10) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state13) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state14) & ~(d_o_full_n == 1'b0)))) begin
        d_i_ce1 = 1'b1;
    end else begin
        d_i_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state34))) begin
        d_o_blk_n = d_o_full_n;
    end else begin
        d_o_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (~(d_o_full_n == 1'b0)) begin
        if ((1'b1 == ap_CS_fsm_state34)) begin
            d_o_din = tmp_4_30_reg_1575;
        end else if ((1'b1 == ap_CS_fsm_state33)) begin
            d_o_din = tmp_4_29_reg_1570;
        end else if ((1'b1 == ap_CS_fsm_state32)) begin
            d_o_din = tmp_4_28_reg_1565;
        end else if ((1'b1 == ap_CS_fsm_state31)) begin
            d_o_din = tmp_4_27_reg_1560;
        end else if ((1'b1 == ap_CS_fsm_state30)) begin
            d_o_din = tmp_4_26_reg_1555;
        end else if ((1'b1 == ap_CS_fsm_state29)) begin
            d_o_din = tmp_4_25_reg_1550;
        end else if ((1'b1 == ap_CS_fsm_state28)) begin
            d_o_din = tmp_4_24_reg_1545;
        end else if ((1'b1 == ap_CS_fsm_state27)) begin
            d_o_din = tmp_4_23_reg_1540;
        end else if ((1'b1 == ap_CS_fsm_state26)) begin
            d_o_din = tmp_4_22_reg_1524;
        end else if ((1'b1 == ap_CS_fsm_state25)) begin
            d_o_din = tmp_4_21_reg_1518;
        end else if ((1'b1 == ap_CS_fsm_state24)) begin
            d_o_din = tmp_4_20_reg_1502;
        end else if ((1'b1 == ap_CS_fsm_state23)) begin
            d_o_din = tmp_4_19_reg_1496;
        end else if ((1'b1 == ap_CS_fsm_state22)) begin
            d_o_din = tmp_4_18_reg_1465;
        end else if ((1'b1 == ap_CS_fsm_state21)) begin
            d_o_din = tmp_4_17_reg_1459;
        end else if ((1'b1 == ap_CS_fsm_state20)) begin
            d_o_din = tmp_4_16_reg_1428;
        end else if ((1'b1 == ap_CS_fsm_state19)) begin
            d_o_din = tmp_4_15_reg_1422;
        end else if ((1'b1 == ap_CS_fsm_state18)) begin
            d_o_din = tmp_4_14_fu_873_p2;
        end else if ((1'b1 == ap_CS_fsm_state17)) begin
            d_o_din = tmp_4_13_fu_762_p2;
        end else if ((1'b1 == ap_CS_fsm_state16)) begin
            d_o_din = tmp_4_12_fu_649_p2;
        end else if ((1'b1 == ap_CS_fsm_state15)) begin
            d_o_din = tmp_4_11_fu_578_p2;
        end else if ((1'b1 == ap_CS_fsm_state14)) begin
            d_o_din = tmp_4_10_fu_565_p2;
        end else if ((1'b1 == ap_CS_fsm_state13)) begin
            d_o_din = tmp_4_s_fu_560_p2;
        end else if ((1'b1 == ap_CS_fsm_state12)) begin
            d_o_din = tmp_4_9_fu_554_p2;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            d_o_din = tmp_4_8_fu_548_p2;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            d_o_din = tmp_4_7_fu_542_p2;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            d_o_din = tmp_4_6_fu_528_p2;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            d_o_din = tmp_4_5_fu_514_p2;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            d_o_din = tmp_4_4_fu_500_p2;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            d_o_din = tmp_4_3_fu_485_p2;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            d_o_din = tmp_4_2_fu_470_p2;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            d_o_din = tmp_4_1_fu_455_p2;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            d_o_din = tmp_s_fu_440_p2;
        end else begin
            d_o_din = 'bx;
        end
    end else begin
        d_o_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state16) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state3) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state17) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state6) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state15) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state4) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state5) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state7) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state8) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state9) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state10) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state13) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state14) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state18) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state19) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state20) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state21) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state22) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state23) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state24) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state25) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state26) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state27) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state28) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state29) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state30) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state31) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state32) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state33) & ~(d_o_full_n == 1'b0)) | ((1'b1 == ap_CS_fsm_state34) & ~(d_o_full_n == 1'b0)))) begin
        d_o_write = 1'b1;
    end else begin
        d_o_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end
        end
        ap_ST_fsm_state16 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state16;
            end
        end
        ap_ST_fsm_state17 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state17;
            end
        end
        ap_ST_fsm_state18 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state18;
            end
        end
        ap_ST_fsm_state19 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state19;
            end
        end
        ap_ST_fsm_state20 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state20;
            end
        end
        ap_ST_fsm_state21 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state21;
            end
        end
        ap_ST_fsm_state22 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state22;
            end
        end
        ap_ST_fsm_state23 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state23;
            end
        end
        ap_ST_fsm_state24 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state24;
            end
        end
        ap_ST_fsm_state25 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state25;
            end
        end
        ap_ST_fsm_state26 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state26;
            end
        end
        ap_ST_fsm_state27 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state27;
            end
        end
        ap_ST_fsm_state28 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state28;
            end
        end
        ap_ST_fsm_state29 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state29;
            end
        end
        ap_ST_fsm_state30 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state30;
            end
        end
        ap_ST_fsm_state31 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state31;
            end
        end
        ap_ST_fsm_state32 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state32;
            end
        end
        ap_ST_fsm_state33 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state33;
            end
        end
        ap_ST_fsm_state34 : begin
            if (~(d_o_full_n == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state34;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state16 = ap_CS_fsm[ap_const_lv32_F];

assign ap_CS_fsm_state17 = ap_CS_fsm[ap_const_lv32_10];

assign ap_CS_fsm_state18 = ap_CS_fsm[ap_const_lv32_11];

assign ap_CS_fsm_state19 = ap_CS_fsm[ap_const_lv32_12];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state20 = ap_CS_fsm[ap_const_lv32_13];

assign ap_CS_fsm_state21 = ap_CS_fsm[ap_const_lv32_14];

assign ap_CS_fsm_state22 = ap_CS_fsm[ap_const_lv32_15];

assign ap_CS_fsm_state23 = ap_CS_fsm[ap_const_lv32_16];

assign ap_CS_fsm_state24 = ap_CS_fsm[ap_const_lv32_17];

assign ap_CS_fsm_state25 = ap_CS_fsm[ap_const_lv32_18];

assign ap_CS_fsm_state26 = ap_CS_fsm[ap_const_lv32_19];

assign ap_CS_fsm_state27 = ap_CS_fsm[ap_const_lv32_1A];

assign ap_CS_fsm_state28 = ap_CS_fsm[ap_const_lv32_1B];

assign ap_CS_fsm_state29 = ap_CS_fsm[ap_const_lv32_1C];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state30 = ap_CS_fsm[ap_const_lv32_1D];

assign ap_CS_fsm_state31 = ap_CS_fsm[ap_const_lv32_1E];

assign ap_CS_fsm_state32 = ap_CS_fsm[ap_const_lv32_1F];

assign ap_CS_fsm_state33 = ap_CS_fsm[ap_const_lv32_20];

assign ap_CS_fsm_state34 = ap_CS_fsm[ap_const_lv32_21];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign tmp10_fu_801_p2 = ($signed(acc_3) + $signed(tmp_2_3_fu_752_p1));

assign tmp11_cast_fu_806_p1 = $signed(tmp11_reg_1476);

assign tmp11_fu_742_p2 = ($signed(tmp12_cast_fu_738_p1) + $signed(tmp_2_10_cast_fu_646_p1));

assign tmp12_cast_fu_738_p1 = $signed(tmp12_fu_732_p2);

assign tmp12_fu_732_p2 = ($signed(tmp_2_18_cast_fu_661_p1) + $signed(tmp_2_26_cast_fu_728_p1));

assign tmp13_fu_893_p2 = ($signed(acc_4) + $signed(tmp_2_4_fu_861_p1));

assign tmp14_cast_fu_898_p1 = $signed(tmp14_reg_1508);

assign tmp14_fu_835_p2 = ($signed(tmp15_cast_fu_831_p1) + $signed(tmp_2_11_cast_fu_756_p1));

assign tmp15_cast_fu_831_p1 = $signed(tmp15_fu_825_p2);

assign tmp15_fu_825_p2 = ($signed(tmp_2_19_cast_fu_767_p1) + $signed(tmp_2_27_cast_fu_821_p1));

assign tmp16_fu_913_p2 = ($signed(acc_5) + $signed(tmp_2_5_fu_864_p1));

assign tmp17_cast_fu_918_p1 = $signed(tmp17_reg_1513);

assign tmp17_fu_855_p2 = ($signed(tmp18_cast_fu_851_p1) + $signed(tmp_2_12_cast_fu_759_p1));

assign tmp18_cast_fu_851_p1 = $signed(tmp18_fu_845_p2);

assign tmp18_fu_845_p2 = ($signed(tmp_2_20_cast_fu_774_p1) + $signed(tmp_2_28_cast_fu_841_p1));

assign tmp19_fu_983_p2 = ($signed(acc_6) + $signed(tmp_2_6_fu_973_p1));

assign tmp1_fu_668_p2 = ($signed(acc_0) + $signed(tmp_2_fu_635_p1));

assign tmp20_cast_fu_988_p1 = $signed(tmp20_reg_1530);

assign tmp20_fu_947_p2 = ($signed(tmp21_cast_fu_943_p1) + $signed(tmp_2_13_cast_fu_867_p1));

assign tmp21_cast_fu_943_p1 = $signed(tmp21_fu_937_p2);

assign tmp21_fu_937_p2 = ($signed(tmp_2_21_cast_fu_878_p1) + $signed(tmp_2_29_cast_fu_933_p1));

assign tmp22_fu_1003_p2 = ($signed(acc_7) + $signed(tmp_2_7_fu_976_p1));

assign tmp23_cast_fu_1008_p1 = $signed(tmp23_reg_1535);

assign tmp23_fu_967_p2 = ($signed(tmp24_cast_fu_963_p1) + $signed(tmp_2_14_cast_fu_870_p1));

assign tmp24_cast_fu_963_p1 = $signed(tmp24_fu_957_p2);

assign tmp24_fu_957_p2 = ($signed(tmp_2_22_cast_fu_885_p1) + $signed(tmp_2_30_cast_fu_953_p1));

assign tmp2_cast_fu_673_p1 = $signed(tmp2_reg_1434);

assign tmp2_fu_610_p2 = ($signed(tmp3_cast_fu_606_p1) + $signed(tmp_2_8_cast_fu_570_p1));

assign tmp3_cast_fu_606_p1 = $signed(tmp3_fu_600_p2);

assign tmp3_fu_600_p2 = ($signed(tmp_2_15_cast_fu_583_p1) + $signed(tmp_2_23_cast_fu_597_p1));

assign tmp4_fu_688_p2 = ($signed(acc_1) + $signed(tmp_2_1_fu_639_p1));

assign tmp5_cast_fu_693_p1 = $signed(tmp5_reg_1439);

assign tmp5_fu_629_p2 = ($signed(tmp6_cast_fu_625_p1) + $signed(tmp_2_9_cast_fu_574_p1));

assign tmp6_cast_fu_625_p1 = $signed(tmp6_fu_619_p2);

assign tmp6_fu_619_p2 = ($signed(tmp_2_16_cast_fu_590_p1) + $signed(tmp_2_24_cast_fu_616_p1));

assign tmp7_fu_781_p2 = ($signed(acc_2) + $signed(tmp_2_2_fu_748_p1));

assign tmp8_cast_fu_786_p1 = $signed(tmp8_reg_1471);

assign tmp8_fu_722_p2 = ($signed(tmp9_cast_fu_718_p1) + $signed(tmp_2_cast_fu_643_p1));

assign tmp9_cast_fu_718_p1 = $signed(tmp9_fu_712_p2);

assign tmp9_fu_712_p2 = ($signed(tmp_2_17_cast_fu_654_p1) + $signed(tmp_2_25_cast_fu_708_p1));

assign tmp_1_fu_451_p1 = acc_1[15:0];

assign tmp_2_10_cast_fu_646_p1 = $signed(d_i_load_11_reg_1197);

assign tmp_2_11_cast_fu_756_p1 = $signed(d_i_load_12_reg_1223);

assign tmp_2_12_cast_fu_759_p1 = $signed(d_i_load_13_reg_1229);

assign tmp_2_13_cast_fu_867_p1 = $signed(d_i_load_14_reg_1255);

assign tmp_2_14_cast_fu_870_p1 = $signed(d_i_load_15_reg_1261);

assign tmp_2_15_cast_fu_583_p1 = $signed(d_i_load_16_reg_1287);

assign tmp_2_16_cast_fu_590_p1 = $signed(d_i_load_17_reg_1293);

assign tmp_2_17_cast_fu_654_p1 = $signed(d_i_load_18_reg_1314);

assign tmp_2_18_cast_fu_661_p1 = $signed(d_i_load_19_reg_1320);

assign tmp_2_19_cast_fu_767_p1 = $signed(d_i_load_20_reg_1341);

assign tmp_2_1_fu_639_p1 = $signed(reg_412);

assign tmp_2_20_cast_fu_774_p1 = $signed(d_i_load_21_reg_1347);

assign tmp_2_21_cast_fu_878_p1 = $signed(d_i_load_22_reg_1368);

assign tmp_2_22_cast_fu_885_p1 = $signed(d_i_load_23_reg_1374);

assign tmp_2_23_cast_fu_597_p1 = $signed(d_i_load_24_reg_1395);

assign tmp_2_24_cast_fu_616_p1 = $signed(d_i_load_25_reg_1401);

assign tmp_2_25_cast_fu_708_p1 = $signed(reg_424);

assign tmp_2_26_cast_fu_728_p1 = $signed(reg_428);

assign tmp_2_27_cast_fu_821_p1 = $signed(reg_408);

assign tmp_2_28_cast_fu_841_p1 = $signed(reg_412);

assign tmp_2_29_cast_fu_933_p1 = $signed(reg_416);

assign tmp_2_2_fu_748_p1 = $signed(reg_416);

assign tmp_2_30_cast_fu_953_p1 = $signed(reg_420);

assign tmp_2_3_fu_752_p1 = $signed(reg_420);

assign tmp_2_4_fu_861_p1 = $signed(d_i_load_4_reg_1107);

assign tmp_2_5_fu_864_p1 = $signed(d_i_load_5_reg_1113);

assign tmp_2_6_fu_973_p1 = $signed(d_i_load_6_reg_1139);

assign tmp_2_7_fu_976_p1 = $signed(d_i_load_7_reg_1145);

assign tmp_2_8_cast_fu_570_p1 = $signed(reg_424);

assign tmp_2_9_cast_fu_574_p1 = $signed(reg_428);

assign tmp_2_cast_fu_643_p1 = $signed(d_i_load_10_reg_1191);

assign tmp_2_fu_635_p1 = $signed(reg_408);

assign tmp_3_1_fu_696_p2 = ($signed(tmp5_cast_fu_693_p1) + $signed(tmp4_fu_688_p2));

assign tmp_3_2_fu_789_p2 = ($signed(tmp8_cast_fu_786_p1) + $signed(tmp7_fu_781_p2));

assign tmp_3_3_fu_809_p2 = ($signed(tmp11_cast_fu_806_p1) + $signed(tmp10_fu_801_p2));

assign tmp_3_4_fu_901_p2 = ($signed(tmp14_cast_fu_898_p1) + $signed(tmp13_fu_893_p2));

assign tmp_3_5_fu_921_p2 = ($signed(tmp17_cast_fu_918_p1) + $signed(tmp16_fu_913_p2));

assign tmp_3_6_fu_991_p2 = ($signed(tmp20_cast_fu_988_p1) + $signed(tmp19_fu_983_p2));

assign tmp_3_7_fu_1011_p2 = ($signed(tmp23_cast_fu_1008_p1) + $signed(tmp22_fu_1003_p2));

assign tmp_3_fu_466_p1 = acc_2[15:0];

assign tmp_3_s_fu_676_p2 = ($signed(tmp2_cast_fu_673_p1) + $signed(tmp1_fu_668_p2));

assign tmp_4_10_fu_565_p2 = (d_i_load_11_reg_1197 + tmp_4_3_reg_1166);

assign tmp_4_11_fu_578_p2 = (d_i_load_12_reg_1223 + tmp_4_4_reg_1186);

assign tmp_4_12_fu_649_p2 = (d_i_load_13_reg_1229 + tmp_4_5_reg_1218);

assign tmp_4_13_fu_762_p2 = (d_i_load_14_reg_1255 + tmp_4_6_reg_1250);

assign tmp_4_14_fu_873_p2 = (d_i_load_15_reg_1261 + tmp_4_7_reg_1282);

assign tmp_4_15_fu_586_p2 = (d_i_load_16_reg_1287 + tmp_4_8_reg_1309);

assign tmp_4_16_fu_593_p2 = (d_i_load_17_reg_1293 + tmp_4_9_reg_1336);

assign tmp_4_17_fu_657_p2 = (d_i_load_18_reg_1314 + tmp_4_s_reg_1363);

assign tmp_4_18_fu_664_p2 = (d_i_load_19_reg_1320 + tmp_4_10_reg_1390);

assign tmp_4_19_fu_770_p2 = (d_i_load_20_reg_1341 + tmp_4_11_reg_1417);

assign tmp_4_1_fu_455_p2 = (reg_412 + tmp_1_fu_451_p1);

assign tmp_4_20_fu_777_p2 = (d_i_load_21_reg_1347 + tmp_4_12_reg_1454);

assign tmp_4_21_fu_881_p2 = (d_i_load_22_reg_1368 + tmp_4_13_reg_1491);

assign tmp_4_22_fu_888_p2 = (d_i_load_23_reg_1374 + tmp_4_14_fu_873_p2);

assign tmp_4_23_fu_979_p2 = (d_i_load_24_reg_1395 + tmp_4_15_reg_1422);

assign tmp_4_24_fu_1023_p2 = (d_i_load_25_reg_1401 + tmp_4_16_reg_1428);

assign tmp_4_25_fu_1027_p2 = (reg_424 + tmp_4_17_reg_1459);

assign tmp_4_26_fu_1032_p2 = (reg_428 + tmp_4_18_reg_1465);

assign tmp_4_27_fu_1037_p2 = (reg_408 + tmp_4_19_reg_1496);

assign tmp_4_28_fu_1042_p2 = (reg_412 + tmp_4_20_reg_1502);

assign tmp_4_29_fu_1047_p2 = (reg_416 + tmp_4_21_reg_1518);

assign tmp_4_2_fu_470_p2 = (reg_416 + tmp_3_fu_466_p1);

assign tmp_4_30_fu_1052_p2 = (reg_420 + tmp_4_22_reg_1524);

assign tmp_4_3_fu_485_p2 = (reg_420 + tmp_4_fu_481_p1);

assign tmp_4_4_fu_500_p2 = (d_i_load_4_reg_1107 + tmp_5_fu_496_p1);

assign tmp_4_5_fu_514_p2 = (d_i_load_5_reg_1113 + tmp_6_fu_510_p1);

assign tmp_4_6_fu_528_p2 = (d_i_load_6_reg_1139 + tmp_7_fu_524_p1);

assign tmp_4_7_fu_542_p2 = (d_i_load_7_reg_1145 + tmp_8_fu_538_p1);

assign tmp_4_8_fu_548_p2 = (reg_424 + tmp_s_reg_1082);

assign tmp_4_9_fu_554_p2 = (reg_428 + tmp_4_1_reg_1102);

assign tmp_4_fu_481_p1 = acc_3[15:0];

assign tmp_4_s_fu_560_p2 = (d_i_load_10_reg_1191 + tmp_4_2_reg_1134);

assign tmp_5_fu_496_p1 = acc_4[15:0];

assign tmp_6_fu_510_p1 = acc_5[15:0];

assign tmp_7_fu_524_p1 = acc_6[15:0];

assign tmp_8_fu_538_p1 = acc_7[15:0];

assign tmp_fu_436_p1 = acc_0[15:0];

assign tmp_s_fu_440_p2 = (reg_408 + tmp_fu_436_p1);

endmodule //array_io
