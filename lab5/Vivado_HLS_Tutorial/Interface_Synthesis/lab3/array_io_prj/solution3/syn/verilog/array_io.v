// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="array_io,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7k160tfbg484-1,HLS_INPUT_CLOCK=4.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=2.960000,HLS_SYN_LAT=11,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=916,HLS_SYN_LUT=1251}" *)

module array_io (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        d_o_0_din,
        d_o_0_full_n,
        d_o_0_write,
        d_o_1_din,
        d_o_1_full_n,
        d_o_1_write,
        d_o_2_din,
        d_o_2_full_n,
        d_o_2_write,
        d_o_3_din,
        d_o_3_full_n,
        d_o_3_write,
        d_i_0_address0,
        d_i_0_ce0,
        d_i_0_q0,
        d_i_0_address1,
        d_i_0_ce1,
        d_i_0_q1,
        d_i_1_address0,
        d_i_1_ce0,
        d_i_1_q0,
        d_i_1_address1,
        d_i_1_ce1,
        d_i_1_q1
);

parameter    ap_ST_fsm_state1 = 12'b1;
parameter    ap_ST_fsm_state2 = 12'b10;
parameter    ap_ST_fsm_state3 = 12'b100;
parameter    ap_ST_fsm_state4 = 12'b1000;
parameter    ap_ST_fsm_state5 = 12'b10000;
parameter    ap_ST_fsm_state6 = 12'b100000;
parameter    ap_ST_fsm_state7 = 12'b1000000;
parameter    ap_ST_fsm_state8 = 12'b10000000;
parameter    ap_ST_fsm_state9 = 12'b100000000;
parameter    ap_ST_fsm_state10 = 12'b1000000000;
parameter    ap_ST_fsm_state11 = 12'b10000000000;
parameter    ap_ST_fsm_state12 = 12'b100000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv64_0 = 64'b0000000000000000000000000000000000000000000000000000000000000000;
parameter    ap_const_lv64_8 = 64'b1000;
parameter    ap_const_lv64_1 = 64'b1;
parameter    ap_const_lv64_9 = 64'b1001;
parameter    ap_const_lv64_2 = 64'b10;
parameter    ap_const_lv64_A = 64'b1010;
parameter    ap_const_lv64_3 = 64'b11;
parameter    ap_const_lv64_B = 64'b1011;
parameter    ap_const_lv64_4 = 64'b100;
parameter    ap_const_lv64_C = 64'b1100;
parameter    ap_const_lv64_5 = 64'b101;
parameter    ap_const_lv64_D = 64'b1101;
parameter    ap_const_lv64_6 = 64'b110;
parameter    ap_const_lv64_E = 64'b1110;
parameter    ap_const_lv64_7 = 64'b111;
parameter    ap_const_lv64_F = 64'b1111;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [15:0] d_o_0_din;
input   d_o_0_full_n;
output   d_o_0_write;
output  [15:0] d_o_1_din;
input   d_o_1_full_n;
output   d_o_1_write;
output  [15:0] d_o_2_din;
input   d_o_2_full_n;
output   d_o_2_write;
output  [15:0] d_o_3_din;
input   d_o_3_full_n;
output   d_o_3_write;
output  [3:0] d_i_0_address0;
output   d_i_0_ce0;
input  [15:0] d_i_0_q0;
output  [3:0] d_i_0_address1;
output   d_i_0_ce1;
input  [15:0] d_i_0_q1;
output  [3:0] d_i_1_address0;
output   d_i_1_ce0;
input  [15:0] d_i_1_q0;
output  [3:0] d_i_1_address1;
output   d_i_1_ce1;
input  [15:0] d_i_1_q1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg[15:0] d_o_0_din;
reg d_o_0_write;
reg[15:0] d_o_1_din;
reg d_o_1_write;
reg[15:0] d_o_2_din;
reg d_o_2_write;
reg[15:0] d_o_3_din;
reg d_o_3_write;
reg[3:0] d_i_0_address0;
reg d_i_0_ce0;
reg[3:0] d_i_0_address1;
reg d_i_0_ce1;
reg[3:0] d_i_1_address0;
reg d_i_1_ce0;
reg[3:0] d_i_1_address1;
reg d_i_1_ce1;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg   [31:0] acc_0;
reg   [31:0] acc_1;
reg   [31:0] acc_2;
reg   [31:0] acc_3;
reg   [31:0] acc_4;
reg   [31:0] acc_5;
reg   [31:0] acc_6;
reg   [31:0] acc_7;
reg    d_o_0_blk_n;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state8;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state12;
reg    d_o_1_blk_n;
reg    d_o_2_blk_n;
reg    d_o_3_blk_n;
reg   [15:0] reg_412;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] ap_CS_fsm_state4;
reg    ap_condition_154;
reg   [15:0] reg_416;
reg   [15:0] reg_420;
reg   [15:0] reg_425;
wire   [0:0] ap_CS_fsm_state3;
reg   [15:0] reg_429;
reg   [15:0] reg_433;
reg   [15:0] reg_438;
reg   [15:0] reg_442;
wire   [15:0] tmp_s_fu_454_p2;
reg   [15:0] tmp_s_reg_1150;
wire   [16:0] tmp3_fu_468_p2;
reg   [16:0] tmp3_reg_1171;
wire   [15:0] tmp_4_1_fu_486_p2;
reg   [15:0] tmp_4_1_reg_1186;
wire   [15:0] tmp_4_8_fu_496_p2;
reg   [15:0] tmp_4_8_reg_1197;
wire   [15:0] tmp_4_15_fu_501_p2;
reg   [15:0] tmp_4_15_reg_1207;
wire   [16:0] tmp6_fu_545_p2;
reg   [16:0] tmp6_reg_1218;
wire   [15:0] tmp_4_2_fu_563_p2;
reg   [15:0] tmp_4_2_reg_1233;
wire   [15:0] tmp_4_9_fu_573_p2;
reg   [15:0] tmp_4_9_reg_1244;
wire   [15:0] tmp_4_16_fu_578_p2;
reg   [15:0] tmp_4_16_reg_1254;
wire   [16:0] tmp9_fu_628_p2;
reg   [16:0] tmp9_reg_1265;
wire   [15:0] tmp_4_3_fu_646_p2;
reg   [15:0] tmp_4_3_reg_1280;
wire   [15:0] tmp_4_s_fu_656_p2;
reg   [15:0] tmp_4_s_reg_1291;
wire   [15:0] tmp_4_17_fu_661_p2;
reg   [15:0] tmp_4_17_reg_1301;
wire   [16:0] tmp12_fu_711_p2;
reg   [16:0] tmp12_reg_1312;
wire   [15:0] tmp_4_4_fu_729_p2;
reg   [15:0] tmp_4_4_reg_1327;
wire   [15:0] tmp_4_10_fu_739_p2;
reg   [15:0] tmp_4_10_reg_1338;
wire   [15:0] tmp_4_18_fu_744_p2;
reg   [15:0] tmp_4_18_reg_1348;
wire   [16:0] tmp15_fu_794_p2;
reg   [16:0] tmp15_reg_1359;
wire   [15:0] tmp_4_5_fu_812_p2;
reg   [15:0] tmp_4_5_reg_1374;
wire   [15:0] tmp_4_11_fu_822_p2;
reg   [15:0] tmp_4_11_reg_1385;
wire   [15:0] tmp_4_19_fu_827_p2;
reg   [15:0] tmp_4_19_reg_1395;
wire   [16:0] tmp18_fu_877_p2;
reg   [16:0] tmp18_reg_1406;
wire   [15:0] tmp_4_6_fu_895_p2;
reg   [15:0] tmp_4_6_reg_1421;
wire   [15:0] tmp_4_12_fu_905_p2;
reg   [15:0] tmp_4_12_reg_1427;
wire   [15:0] tmp_4_20_fu_910_p2;
reg   [15:0] tmp_4_20_reg_1437;
wire   [16:0] tmp21_fu_960_p2;
reg   [16:0] tmp21_reg_1443;
wire   [15:0] tmp_4_7_fu_978_p2;
reg   [15:0] tmp_4_7_reg_1453;
wire   [15:0] tmp_4_13_fu_988_p2;
reg   [15:0] tmp_4_13_reg_1459;
wire   [15:0] tmp_4_21_fu_993_p2;
reg   [15:0] tmp_4_21_reg_1464;
wire   [16:0] tmp24_fu_1043_p2;
reg   [16:0] tmp24_reg_1470;
wire   [15:0] tmp_4_14_fu_1057_p2;
reg   [15:0] tmp_4_14_reg_1475;
wire   [15:0] tmp_4_22_fu_1062_p2;
reg   [15:0] tmp_4_22_reg_1480;
wire   [15:0] tmp_4_23_fu_588_p2;
wire   [15:0] tmp_4_24_fu_671_p2;
wire   [15:0] tmp_4_25_fu_754_p2;
wire   [15:0] tmp_4_26_fu_837_p2;
wire   [15:0] tmp_4_27_fu_920_p2;
wire   [15:0] tmp_4_28_fu_1003_p2;
wire   [15:0] tmp_4_29_fu_1068_p2;
wire   [15:0] tmp_4_30_fu_1104_p2;
wire   [31:0] tmp_3_s_fu_529_p2;
wire   [31:0] tmp_3_1_fu_612_p2;
wire   [31:0] tmp_3_2_fu_695_p2;
wire   [31:0] tmp_3_3_fu_778_p2;
wire   [31:0] tmp_3_4_fu_861_p2;
wire   [31:0] tmp_3_5_fu_944_p2;
wire   [31:0] tmp_3_6_fu_1027_p2;
wire   [31:0] tmp_3_7_fu_1092_p2;
wire   [15:0] tmp_fu_450_p1;
wire  signed [16:0] tmp_2_15_cast_fu_460_p1;
wire  signed [16:0] tmp_2_23_cast_fu_464_p1;
wire   [15:0] tmp_1_fu_482_p1;
wire  signed [31:0] tmp_2_fu_474_p1;
wire  signed [17:0] tmp3_cast_fu_516_p1;
wire  signed [17:0] tmp_2_8_cast_fu_492_p1;
wire   [17:0] tmp2_fu_519_p2;
wire  signed [31:0] tmp2_cast_fu_525_p1;
wire   [31:0] tmp1_fu_511_p2;
wire  signed [16:0] tmp_2_16_cast_fu_507_p1;
wire  signed [16:0] tmp_2_24_cast_fu_541_p1;
wire   [15:0] tmp_3_fu_559_p1;
wire  signed [31:0] tmp_2_1_fu_551_p1;
wire  signed [17:0] tmp6_cast_fu_599_p1;
wire  signed [17:0] tmp_2_9_cast_fu_569_p1;
wire   [17:0] tmp5_fu_602_p2;
wire  signed [31:0] tmp5_cast_fu_608_p1;
wire   [31:0] tmp4_fu_594_p2;
wire  signed [16:0] tmp_2_17_cast_fu_584_p1;
wire  signed [16:0] tmp_2_25_cast_fu_624_p1;
wire   [15:0] tmp_4_fu_642_p1;
wire  signed [31:0] tmp_2_2_fu_634_p1;
wire  signed [17:0] tmp9_cast_fu_682_p1;
wire  signed [17:0] tmp_2_cast_fu_652_p1;
wire   [17:0] tmp8_fu_685_p2;
wire  signed [31:0] tmp8_cast_fu_691_p1;
wire   [31:0] tmp7_fu_677_p2;
wire  signed [16:0] tmp_2_18_cast_fu_667_p1;
wire  signed [16:0] tmp_2_26_cast_fu_707_p1;
wire   [15:0] tmp_5_fu_725_p1;
wire  signed [31:0] tmp_2_3_fu_717_p1;
wire  signed [17:0] tmp12_cast_fu_765_p1;
wire  signed [17:0] tmp_2_10_cast_fu_735_p1;
wire   [17:0] tmp11_fu_768_p2;
wire  signed [31:0] tmp11_cast_fu_774_p1;
wire   [31:0] tmp10_fu_760_p2;
wire  signed [16:0] tmp_2_19_cast_fu_750_p1;
wire  signed [16:0] tmp_2_27_cast_fu_790_p1;
wire   [15:0] tmp_6_fu_808_p1;
wire  signed [31:0] tmp_2_4_fu_800_p1;
wire  signed [17:0] tmp15_cast_fu_848_p1;
wire  signed [17:0] tmp_2_11_cast_fu_818_p1;
wire   [17:0] tmp14_fu_851_p2;
wire  signed [31:0] tmp14_cast_fu_857_p1;
wire   [31:0] tmp13_fu_843_p2;
wire  signed [16:0] tmp_2_20_cast_fu_833_p1;
wire  signed [16:0] tmp_2_28_cast_fu_873_p1;
wire   [15:0] tmp_7_fu_891_p1;
wire  signed [31:0] tmp_2_5_fu_883_p1;
wire  signed [17:0] tmp18_cast_fu_931_p1;
wire  signed [17:0] tmp_2_12_cast_fu_901_p1;
wire   [17:0] tmp17_fu_934_p2;
wire  signed [31:0] tmp17_cast_fu_940_p1;
wire   [31:0] tmp16_fu_926_p2;
wire  signed [16:0] tmp_2_21_cast_fu_916_p1;
wire  signed [16:0] tmp_2_29_cast_fu_956_p1;
wire   [15:0] tmp_8_fu_974_p1;
wire  signed [31:0] tmp_2_6_fu_966_p1;
wire  signed [17:0] tmp21_cast_fu_1014_p1;
wire  signed [17:0] tmp_2_13_cast_fu_984_p1;
wire   [17:0] tmp20_fu_1017_p2;
wire  signed [31:0] tmp20_cast_fu_1023_p1;
wire   [31:0] tmp19_fu_1009_p2;
wire  signed [16:0] tmp_2_22_cast_fu_999_p1;
wire  signed [16:0] tmp_2_30_cast_fu_1039_p1;
wire  signed [31:0] tmp_2_7_fu_1049_p1;
wire  signed [17:0] tmp24_cast_fu_1079_p1;
wire  signed [17:0] tmp_2_14_cast_fu_1053_p1;
wire   [17:0] tmp23_fu_1082_p2;
wire  signed [31:0] tmp23_cast_fu_1088_p1;
wire   [31:0] tmp22_fu_1074_p2;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'b1;
#0 acc_0 = 32'b00000000000000000000000000000000;
#0 acc_1 = 32'b00000000000000000000000000000000;
#0 acc_2 = 32'b00000000000000000000000000000000;
#0 acc_3 = 32'b00000000000000000000000000000000;
#0 acc_4 = 32'b00000000000000000000000000000000;
#0 acc_5 = 32'b00000000000000000000000000000000;
#0 acc_6 = 32'b00000000000000000000000000000000;
#0 acc_7 = 32'b00000000000000000000000000000000;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)))) begin
        reg_420 <= d_i_1_q0;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        reg_420 <= d_i_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)))) begin
        reg_433 <= d_i_1_q1;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        reg_433 <= d_i_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        acc_0 <= tmp_3_s_fu_529_p2;
        tmp6_reg_1218 <= tmp6_fu_545_p2;
        tmp_4_15_reg_1207 <= tmp_4_15_fu_501_p2;
        tmp_4_1_reg_1186 <= tmp_4_1_fu_486_p2;
        tmp_4_8_reg_1197 <= tmp_4_8_fu_496_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1))) begin
        acc_1 <= tmp_3_1_fu_612_p2;
        tmp9_reg_1265 <= tmp9_fu_628_p2;
        tmp_4_16_reg_1254 <= tmp_4_16_fu_578_p2;
        tmp_4_2_reg_1233 <= tmp_4_2_fu_563_p2;
        tmp_4_9_reg_1244 <= tmp_4_9_fu_573_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1))) begin
        acc_2 <= tmp_3_2_fu_695_p2;
        tmp12_reg_1312 <= tmp12_fu_711_p2;
        tmp_4_17_reg_1301 <= tmp_4_17_fu_661_p2;
        tmp_4_3_reg_1280 <= tmp_4_3_fu_646_p2;
        tmp_4_s_reg_1291 <= tmp_4_s_fu_656_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1))) begin
        acc_3 <= tmp_3_3_fu_778_p2;
        tmp15_reg_1359 <= tmp15_fu_794_p2;
        tmp_4_10_reg_1338 <= tmp_4_10_fu_739_p2;
        tmp_4_18_reg_1348 <= tmp_4_18_fu_744_p2;
        tmp_4_4_reg_1327 <= tmp_4_4_fu_729_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1))) begin
        acc_4 <= tmp_3_4_fu_861_p2;
        tmp18_reg_1406 <= tmp18_fu_877_p2;
        tmp_4_11_reg_1385 <= tmp_4_11_fu_822_p2;
        tmp_4_19_reg_1395 <= tmp_4_19_fu_827_p2;
        tmp_4_5_reg_1374 <= tmp_4_5_fu_812_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1))) begin
        acc_5 <= tmp_3_5_fu_944_p2;
        tmp21_reg_1443 <= tmp21_fu_960_p2;
        tmp_4_12_reg_1427 <= tmp_4_12_fu_905_p2;
        tmp_4_20_reg_1437 <= tmp_4_20_fu_910_p2;
        tmp_4_6_reg_1421 <= tmp_4_6_fu_895_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_154 == 1'b1))) begin
        acc_6 <= tmp_3_6_fu_1027_p2;
        tmp24_reg_1470 <= tmp24_fu_1043_p2;
        tmp_4_13_reg_1459 <= tmp_4_13_fu_988_p2;
        tmp_4_21_reg_1464 <= tmp_4_21_fu_993_p2;
        tmp_4_7_reg_1453 <= tmp_4_7_fu_978_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(ap_condition_154 == 1'b1))) begin
        acc_7 <= tmp_3_7_fu_1092_p2;
        tmp_4_14_reg_1475 <= tmp_4_14_fu_1057_p2;
        tmp_4_22_reg_1480 <= tmp_4_22_fu_1062_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_154 == 1'b1)))) begin
        reg_412 <= d_i_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)))) begin
        reg_416 <= d_i_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_425 <= d_i_0_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_429 <= d_i_0_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        reg_438 <= d_i_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)))) begin
        reg_442 <= d_i_1_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        tmp3_reg_1171 <= tmp3_fu_468_p2;
        tmp_s_reg_1150 <= tmp_s_fu_454_p2;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(ap_condition_154 == 1'b1))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(ap_condition_154 == 1'b1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        d_i_0_address0 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        d_i_0_address0 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_i_0_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        d_i_0_address0 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        d_i_0_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_i_0_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_i_0_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_i_0_address0 = ap_const_lv64_1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        d_i_0_address0 = ap_const_lv64_0;
    end else begin
        d_i_0_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        d_i_0_address1 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_i_0_address1 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        d_i_0_address1 = ap_const_lv64_C;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        d_i_0_address1 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_i_0_address1 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_i_0_address1 = ap_const_lv64_9;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_i_0_address1 = ap_const_lv64_8;
    end else begin
        d_i_0_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | (1'b1 == ap_CS_fsm_state3) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)))) begin
        d_i_0_ce0 = 1'b1;
    end else begin
        d_i_0_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | (1'b1 == ap_CS_fsm_state3))) begin
        d_i_0_ce1 = 1'b1;
    end else begin
        d_i_0_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        d_i_1_address0 = ap_const_lv64_7;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_i_1_address0 = ap_const_lv64_6;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        d_i_1_address0 = ap_const_lv64_5;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        d_i_1_address0 = ap_const_lv64_4;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_i_1_address0 = ap_const_lv64_3;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_i_1_address0 = ap_const_lv64_2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_i_1_address0 = ap_const_lv64_1;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        d_i_1_address0 = ap_const_lv64_0;
    end else begin
        d_i_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        d_i_1_address1 = ap_const_lv64_F;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        d_i_1_address1 = ap_const_lv64_E;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        d_i_1_address1 = ap_const_lv64_D;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        d_i_1_address1 = ap_const_lv64_C;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        d_i_1_address1 = ap_const_lv64_B;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        d_i_1_address1 = ap_const_lv64_A;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        d_i_1_address1 = ap_const_lv64_9;
    end else if ((ap_CS_fsm_state1 == 1'b1)) begin
        d_i_1_address1 = ap_const_lv64_8;
    end else begin
        d_i_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | (1'b1 == ap_CS_fsm_state3) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)))) begin
        d_i_1_ce0 = 1'b1;
    end else begin
        d_i_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state4) | ((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | (1'b1 == ap_CS_fsm_state3) | ((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0)))) begin
        d_i_1_ce1 = 1'b1;
    end else begin
        d_i_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        d_o_0_blk_n = d_o_0_full_n;
    end else begin
        d_o_0_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (~(ap_condition_154 == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            d_o_0_din = tmp_4_7_reg_1453;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            d_o_0_din = tmp_4_6_reg_1421;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            d_o_0_din = tmp_4_5_reg_1374;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            d_o_0_din = tmp_4_4_reg_1327;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            d_o_0_din = tmp_4_3_reg_1280;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            d_o_0_din = tmp_4_2_reg_1233;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            d_o_0_din = tmp_4_1_reg_1186;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            d_o_0_din = tmp_s_reg_1150;
        end else begin
            d_o_0_din = 'bx;
        end
    end else begin
        d_o_0_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & ~(ap_condition_154 == 1'b1)))) begin
        d_o_0_write = 1'b1;
    end else begin
        d_o_0_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        d_o_1_blk_n = d_o_1_full_n;
    end else begin
        d_o_1_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (~(ap_condition_154 == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            d_o_1_din = tmp_4_14_reg_1475;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            d_o_1_din = tmp_4_13_reg_1459;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            d_o_1_din = tmp_4_12_reg_1427;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            d_o_1_din = tmp_4_11_reg_1385;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            d_o_1_din = tmp_4_10_reg_1338;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            d_o_1_din = tmp_4_s_reg_1291;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            d_o_1_din = tmp_4_9_reg_1244;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            d_o_1_din = tmp_4_8_reg_1197;
        end else begin
            d_o_1_din = 'bx;
        end
    end else begin
        d_o_1_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & ~(ap_condition_154 == 1'b1)))) begin
        d_o_1_write = 1'b1;
    end else begin
        d_o_1_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        d_o_2_blk_n = d_o_2_full_n;
    end else begin
        d_o_2_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (~(ap_condition_154 == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            d_o_2_din = tmp_4_22_reg_1480;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            d_o_2_din = tmp_4_21_reg_1464;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            d_o_2_din = tmp_4_20_reg_1437;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            d_o_2_din = tmp_4_19_reg_1395;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            d_o_2_din = tmp_4_18_reg_1348;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            d_o_2_din = tmp_4_17_reg_1301;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            d_o_2_din = tmp_4_16_reg_1254;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            d_o_2_din = tmp_4_15_reg_1207;
        end else begin
            d_o_2_din = 'bx;
        end
    end else begin
        d_o_2_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & ~(ap_condition_154 == 1'b1)))) begin
        d_o_2_write = 1'b1;
    end else begin
        d_o_2_write = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12))) begin
        d_o_3_blk_n = d_o_3_full_n;
    end else begin
        d_o_3_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (~(ap_condition_154 == 1'b1)) begin
        if ((1'b1 == ap_CS_fsm_state12)) begin
            d_o_3_din = tmp_4_30_fu_1104_p2;
        end else if ((1'b1 == ap_CS_fsm_state11)) begin
            d_o_3_din = tmp_4_29_fu_1068_p2;
        end else if ((1'b1 == ap_CS_fsm_state10)) begin
            d_o_3_din = tmp_4_28_fu_1003_p2;
        end else if ((1'b1 == ap_CS_fsm_state9)) begin
            d_o_3_din = tmp_4_27_fu_920_p2;
        end else if ((1'b1 == ap_CS_fsm_state8)) begin
            d_o_3_din = tmp_4_26_fu_837_p2;
        end else if ((1'b1 == ap_CS_fsm_state7)) begin
            d_o_3_din = tmp_4_25_fu_754_p2;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            d_o_3_din = tmp_4_24_fu_671_p2;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            d_o_3_din = tmp_4_23_fu_588_p2;
        end else begin
            d_o_3_din = 'bx;
        end
    end else begin
        d_o_3_din = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state6) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state8) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state10) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state5) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state7) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state9) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state11) & ~(ap_condition_154 == 1'b1)) | ((1'b1 == ap_CS_fsm_state12) & ~(ap_condition_154 == 1'b1)))) begin
        d_o_3_write = 1'b1;
    end else begin
        d_o_3_write = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(ap_condition_154 == 1'b1)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

always @ (*) begin
    ap_condition_154 = ((d_o_0_full_n == 1'b0) | (d_o_1_full_n == 1'b0) | (d_o_2_full_n == 1'b0) | (d_o_3_full_n == 1'b0));
end

assign tmp10_fu_760_p2 = ($signed(acc_3) + $signed(tmp_2_3_fu_717_p1));

assign tmp11_cast_fu_774_p1 = $signed(tmp11_fu_768_p2);

assign tmp11_fu_768_p2 = ($signed(tmp12_cast_fu_765_p1) + $signed(tmp_2_10_cast_fu_735_p1));

assign tmp12_cast_fu_765_p1 = $signed(tmp12_reg_1312);

assign tmp12_fu_711_p2 = ($signed(tmp_2_18_cast_fu_667_p1) + $signed(tmp_2_26_cast_fu_707_p1));

assign tmp13_fu_843_p2 = ($signed(acc_4) + $signed(tmp_2_4_fu_800_p1));

assign tmp14_cast_fu_857_p1 = $signed(tmp14_fu_851_p2);

assign tmp14_fu_851_p2 = ($signed(tmp15_cast_fu_848_p1) + $signed(tmp_2_11_cast_fu_818_p1));

assign tmp15_cast_fu_848_p1 = $signed(tmp15_reg_1359);

assign tmp15_fu_794_p2 = ($signed(tmp_2_19_cast_fu_750_p1) + $signed(tmp_2_27_cast_fu_790_p1));

assign tmp16_fu_926_p2 = ($signed(acc_5) + $signed(tmp_2_5_fu_883_p1));

assign tmp17_cast_fu_940_p1 = $signed(tmp17_fu_934_p2);

assign tmp17_fu_934_p2 = ($signed(tmp18_cast_fu_931_p1) + $signed(tmp_2_12_cast_fu_901_p1));

assign tmp18_cast_fu_931_p1 = $signed(tmp18_reg_1406);

assign tmp18_fu_877_p2 = ($signed(tmp_2_20_cast_fu_833_p1) + $signed(tmp_2_28_cast_fu_873_p1));

assign tmp19_fu_1009_p2 = ($signed(acc_6) + $signed(tmp_2_6_fu_966_p1));

assign tmp1_fu_511_p2 = ($signed(acc_0) + $signed(tmp_2_fu_474_p1));

assign tmp20_cast_fu_1023_p1 = $signed(tmp20_fu_1017_p2);

assign tmp20_fu_1017_p2 = ($signed(tmp21_cast_fu_1014_p1) + $signed(tmp_2_13_cast_fu_984_p1));

assign tmp21_cast_fu_1014_p1 = $signed(tmp21_reg_1443);

assign tmp21_fu_960_p2 = ($signed(tmp_2_21_cast_fu_916_p1) + $signed(tmp_2_29_cast_fu_956_p1));

assign tmp22_fu_1074_p2 = ($signed(acc_7) + $signed(tmp_2_7_fu_1049_p1));

assign tmp23_cast_fu_1088_p1 = $signed(tmp23_fu_1082_p2);

assign tmp23_fu_1082_p2 = ($signed(tmp24_cast_fu_1079_p1) + $signed(tmp_2_14_cast_fu_1053_p1));

assign tmp24_cast_fu_1079_p1 = $signed(tmp24_reg_1470);

assign tmp24_fu_1043_p2 = ($signed(tmp_2_22_cast_fu_999_p1) + $signed(tmp_2_30_cast_fu_1039_p1));

assign tmp2_cast_fu_525_p1 = $signed(tmp2_fu_519_p2);

assign tmp2_fu_519_p2 = ($signed(tmp3_cast_fu_516_p1) + $signed(tmp_2_8_cast_fu_492_p1));

assign tmp3_cast_fu_516_p1 = $signed(tmp3_reg_1171);

assign tmp3_fu_468_p2 = ($signed(tmp_2_15_cast_fu_460_p1) + $signed(tmp_2_23_cast_fu_464_p1));

assign tmp4_fu_594_p2 = ($signed(acc_1) + $signed(tmp_2_1_fu_551_p1));

assign tmp5_cast_fu_608_p1 = $signed(tmp5_fu_602_p2);

assign tmp5_fu_602_p2 = ($signed(tmp6_cast_fu_599_p1) + $signed(tmp_2_9_cast_fu_569_p1));

assign tmp6_cast_fu_599_p1 = $signed(tmp6_reg_1218);

assign tmp6_fu_545_p2 = ($signed(tmp_2_16_cast_fu_507_p1) + $signed(tmp_2_24_cast_fu_541_p1));

assign tmp7_fu_677_p2 = ($signed(acc_2) + $signed(tmp_2_2_fu_634_p1));

assign tmp8_cast_fu_691_p1 = $signed(tmp8_fu_685_p2);

assign tmp8_fu_685_p2 = ($signed(tmp9_cast_fu_682_p1) + $signed(tmp_2_cast_fu_652_p1));

assign tmp9_cast_fu_682_p1 = $signed(tmp9_reg_1265);

assign tmp9_fu_628_p2 = ($signed(tmp_2_17_cast_fu_584_p1) + $signed(tmp_2_25_cast_fu_624_p1));

assign tmp_1_fu_482_p1 = acc_1[15:0];

assign tmp_2_10_cast_fu_735_p1 = $signed(reg_429);

assign tmp_2_11_cast_fu_818_p1 = $signed(reg_429);

assign tmp_2_12_cast_fu_901_p1 = $signed(reg_429);

assign tmp_2_13_cast_fu_984_p1 = $signed(reg_429);

assign tmp_2_14_cast_fu_1053_p1 = $signed(reg_412);

assign tmp_2_15_cast_fu_460_p1 = $signed(reg_416);

assign tmp_2_16_cast_fu_507_p1 = $signed(reg_433);

assign tmp_2_17_cast_fu_584_p1 = $signed(reg_416);

assign tmp_2_18_cast_fu_667_p1 = $signed(reg_420);

assign tmp_2_19_cast_fu_750_p1 = $signed(reg_416);

assign tmp_2_1_fu_551_p1 = $signed(reg_425);

assign tmp_2_20_cast_fu_833_p1 = $signed(reg_420);

assign tmp_2_21_cast_fu_916_p1 = $signed(reg_416);

assign tmp_2_22_cast_fu_999_p1 = $signed(reg_420);

assign tmp_2_23_cast_fu_464_p1 = $signed(reg_420);

assign tmp_2_24_cast_fu_541_p1 = $signed(reg_438);

assign tmp_2_25_cast_fu_624_p1 = $signed(reg_442);

assign tmp_2_26_cast_fu_707_p1 = $signed(reg_433);

assign tmp_2_27_cast_fu_790_p1 = $signed(reg_438);

assign tmp_2_28_cast_fu_873_p1 = $signed(reg_442);

assign tmp_2_29_cast_fu_956_p1 = $signed(reg_433);

assign tmp_2_2_fu_634_p1 = $signed(reg_412);

assign tmp_2_30_cast_fu_1039_p1 = $signed(reg_438);

assign tmp_2_3_fu_717_p1 = $signed(reg_425);

assign tmp_2_4_fu_800_p1 = $signed(reg_412);

assign tmp_2_5_fu_883_p1 = $signed(reg_425);

assign tmp_2_6_fu_966_p1 = $signed(reg_412);

assign tmp_2_7_fu_1049_p1 = $signed(reg_425);

assign tmp_2_8_cast_fu_492_p1 = $signed(reg_429);

assign tmp_2_9_cast_fu_569_p1 = $signed(reg_429);

assign tmp_2_cast_fu_652_p1 = $signed(reg_429);

assign tmp_2_fu_474_p1 = $signed(reg_412);

assign tmp_3_1_fu_612_p2 = ($signed(tmp5_cast_fu_608_p1) + $signed(tmp4_fu_594_p2));

assign tmp_3_2_fu_695_p2 = ($signed(tmp8_cast_fu_691_p1) + $signed(tmp7_fu_677_p2));

assign tmp_3_3_fu_778_p2 = ($signed(tmp11_cast_fu_774_p1) + $signed(tmp10_fu_760_p2));

assign tmp_3_4_fu_861_p2 = ($signed(tmp14_cast_fu_857_p1) + $signed(tmp13_fu_843_p2));

assign tmp_3_5_fu_944_p2 = ($signed(tmp17_cast_fu_940_p1) + $signed(tmp16_fu_926_p2));

assign tmp_3_6_fu_1027_p2 = ($signed(tmp20_cast_fu_1023_p1) + $signed(tmp19_fu_1009_p2));

assign tmp_3_7_fu_1092_p2 = ($signed(tmp23_cast_fu_1088_p1) + $signed(tmp22_fu_1074_p2));

assign tmp_3_fu_559_p1 = acc_2[15:0];

assign tmp_3_s_fu_529_p2 = ($signed(tmp2_cast_fu_525_p1) + $signed(tmp1_fu_511_p2));

assign tmp_4_10_fu_739_p2 = (reg_429 + tmp_4_3_reg_1280);

assign tmp_4_11_fu_822_p2 = (reg_429 + tmp_4_4_reg_1327);

assign tmp_4_12_fu_905_p2 = (reg_429 + tmp_4_5_reg_1374);

assign tmp_4_13_fu_988_p2 = (reg_429 + tmp_4_6_reg_1421);

assign tmp_4_14_fu_1057_p2 = (reg_412 + tmp_4_7_reg_1453);

assign tmp_4_15_fu_501_p2 = (reg_416 + tmp_4_8_fu_496_p2);

assign tmp_4_16_fu_578_p2 = (reg_433 + tmp_4_9_fu_573_p2);

assign tmp_4_17_fu_661_p2 = (reg_416 + tmp_4_s_fu_656_p2);

assign tmp_4_18_fu_744_p2 = (reg_420 + tmp_4_10_fu_739_p2);

assign tmp_4_19_fu_827_p2 = (reg_416 + tmp_4_11_fu_822_p2);

assign tmp_4_1_fu_486_p2 = (reg_425 + tmp_1_fu_482_p1);

assign tmp_4_20_fu_910_p2 = (reg_420 + tmp_4_12_fu_905_p2);

assign tmp_4_21_fu_993_p2 = (reg_416 + tmp_4_13_fu_988_p2);

assign tmp_4_22_fu_1062_p2 = (reg_420 + tmp_4_14_fu_1057_p2);

assign tmp_4_23_fu_588_p2 = (reg_420 + tmp_4_15_reg_1207);

assign tmp_4_24_fu_671_p2 = (reg_438 + tmp_4_16_reg_1254);

assign tmp_4_25_fu_754_p2 = (reg_442 + tmp_4_17_reg_1301);

assign tmp_4_26_fu_837_p2 = (reg_433 + tmp_4_18_reg_1348);

assign tmp_4_27_fu_920_p2 = (reg_438 + tmp_4_19_reg_1395);

assign tmp_4_28_fu_1003_p2 = (reg_442 + tmp_4_20_reg_1437);

assign tmp_4_29_fu_1068_p2 = (reg_433 + tmp_4_21_reg_1464);

assign tmp_4_2_fu_563_p2 = (reg_412 + tmp_3_fu_559_p1);

assign tmp_4_30_fu_1104_p2 = (reg_438 + tmp_4_22_reg_1480);

assign tmp_4_3_fu_646_p2 = (reg_425 + tmp_4_fu_642_p1);

assign tmp_4_4_fu_729_p2 = (reg_412 + tmp_5_fu_725_p1);

assign tmp_4_5_fu_812_p2 = (reg_425 + tmp_6_fu_808_p1);

assign tmp_4_6_fu_895_p2 = (reg_412 + tmp_7_fu_891_p1);

assign tmp_4_7_fu_978_p2 = (reg_425 + tmp_8_fu_974_p1);

assign tmp_4_8_fu_496_p2 = (reg_429 + tmp_s_reg_1150);

assign tmp_4_9_fu_573_p2 = (reg_429 + tmp_4_1_reg_1186);

assign tmp_4_fu_642_p1 = acc_3[15:0];

assign tmp_4_s_fu_656_p2 = (reg_429 + tmp_4_2_reg_1233);

assign tmp_5_fu_725_p1 = acc_4[15:0];

assign tmp_6_fu_808_p1 = acc_5[15:0];

assign tmp_7_fu_891_p1 = acc_6[15:0];

assign tmp_8_fu_974_p1 = acc_7[15:0];

assign tmp_fu_450_p1 = acc_0[15:0];

assign tmp_s_fu_454_p2 = (reg_412 + tmp_fu_450_p1);

endmodule //array_io
