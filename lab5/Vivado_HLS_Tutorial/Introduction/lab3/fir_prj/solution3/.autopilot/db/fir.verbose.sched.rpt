

================================================================
== Vivado HLS Report for 'fir'
================================================================
* Date:           Sat May 13 15:30:32 2017

* Version:        2016.4 (Build 1756540 on Mon Jan 23 19:31:01 MST 2017)
* Project:        fir_prj
* Solution:       solution3
* Product family: kintex7
* Target device:  xc7k160tfbg484-2


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|      8.43|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +-----+-----+-----+-----+---------+
    |  Latency  |  Interval | Pipeline|
    | min | max | min | max |   Type  |
    +-----+-----+-----+-----+---------+
    |   15|   15|   16|   16|   none  |
    +-----+-----+-----+-----+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        N/A

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states: 16
* Pipeline: 0
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	3  / true
3 --> 
	4  / true
4 --> 
	5  / true
5 --> 
	6  / true
6 --> 
	7  / true
7 --> 
	8  / true
8 --> 
	9  / true
9 --> 
	10  / true
10 --> 
	11  / true
11 --> 
	12  / true
12 --> 
	13  / true
13 --> 
	14  / true
14 --> 
	15  / true
15 --> 
	16  / true
16 --> 
* FSM state operations: 

 <State 1>: 2.39ns
ST_1: c_addr (23)  [1/1] 0.00ns  loc: fir.c:71
:9  %c_addr = getelementptr [11 x i32]* %c, i64 0, i64 10

ST_1: c_load (24)  [2/2] 2.39ns  loc: fir.c:71
:10  %c_load = load i32* %c_addr, align 4


 <State 2>: 2.39ns
ST_2: c_load (24)  [1/2] 2.39ns  loc: fir.c:71
:10  %c_load = load i32* %c_addr, align 4

ST_2: c_addr_1 (28)  [1/1] 0.00ns  loc: fir.c:71
:14  %c_addr_1 = getelementptr [11 x i32]* %c, i64 0, i64 9

ST_2: c_load_1 (29)  [2/2] 2.39ns  loc: fir.c:71
:15  %c_load_1 = load i32* %c_addr_1, align 4


 <State 3>: 2.39ns
ST_3: c_load_1 (29)  [1/2] 2.39ns  loc: fir.c:71
:15  %c_load_1 = load i32* %c_addr_1, align 4

ST_3: c_addr_2 (33)  [1/1] 0.00ns  loc: fir.c:71
:19  %c_addr_2 = getelementptr [11 x i32]* %c, i64 0, i64 8

ST_3: c_load_2 (34)  [2/2] 2.39ns  loc: fir.c:71
:20  %c_load_2 = load i32* %c_addr_2, align 4


 <State 4>: 8.43ns
ST_4: shift_reg_9_load (22)  [1/1] 0.00ns  loc: fir.c:68
:8  %shift_reg_9_load = load i32* @shift_reg_9, align 4

ST_4: tmp_6 (25)  [3/3] 8.43ns  loc: fir.c:71
:11  %tmp_6 = mul nsw i32 %shift_reg_9_load, %c_load

ST_4: shift_reg_8_load (26)  [1/1] 0.00ns  loc: fir.c:68
:12  %shift_reg_8_load = load i32* @shift_reg_8, align 16

ST_4: StgValue_28 (27)  [1/1] 0.00ns  loc: fir.c:68
:13  store i32 %shift_reg_8_load, i32* @shift_reg_9, align 4

ST_4: tmp_6_1 (30)  [3/3] 8.43ns  loc: fir.c:71
:16  %tmp_6_1 = mul nsw i32 %shift_reg_8_load, %c_load_1

ST_4: c_load_2 (34)  [1/2] 2.39ns  loc: fir.c:71
:20  %c_load_2 = load i32* %c_addr_2, align 4

ST_4: c_addr_3 (38)  [1/1] 0.00ns  loc: fir.c:71
:24  %c_addr_3 = getelementptr [11 x i32]* %c, i64 0, i64 7

ST_4: c_load_3 (39)  [2/2] 2.39ns  loc: fir.c:71
:25  %c_load_3 = load i32* %c_addr_3, align 4


 <State 5>: 8.43ns
ST_5: tmp_6 (25)  [2/3] 8.43ns  loc: fir.c:71
:11  %tmp_6 = mul nsw i32 %shift_reg_9_load, %c_load

ST_5: tmp_6_1 (30)  [2/3] 8.43ns  loc: fir.c:71
:16  %tmp_6_1 = mul nsw i32 %shift_reg_8_load, %c_load_1

ST_5: c_load_3 (39)  [1/2] 2.39ns  loc: fir.c:71
:25  %c_load_3 = load i32* %c_addr_3, align 4

ST_5: c_addr_4 (43)  [1/1] 0.00ns  loc: fir.c:71
:29  %c_addr_4 = getelementptr [11 x i32]* %c, i64 0, i64 6

ST_5: c_load_4 (44)  [2/2] 2.39ns  loc: fir.c:71
:30  %c_load_4 = load i32* %c_addr_4, align 4


 <State 6>: 8.43ns
ST_6: tmp_6 (25)  [1/3] 8.43ns  loc: fir.c:71
:11  %tmp_6 = mul nsw i32 %shift_reg_9_load, %c_load

ST_6: tmp_6_1 (30)  [1/3] 8.43ns  loc: fir.c:71
:16  %tmp_6_1 = mul nsw i32 %shift_reg_8_load, %c_load_1

ST_6: c_load_4 (44)  [1/2] 2.39ns  loc: fir.c:71
:30  %c_load_4 = load i32* %c_addr_4, align 4

ST_6: c_addr_5 (48)  [1/1] 0.00ns  loc: fir.c:71
:34  %c_addr_5 = getelementptr [11 x i32]* %c, i64 0, i64 5

ST_6: c_load_5 (49)  [2/2] 2.39ns  loc: fir.c:71
:35  %c_load_5 = load i32* %c_addr_5, align 4


 <State 7>: 8.43ns
ST_7: shift_reg_7_load (31)  [1/1] 0.00ns  loc: fir.c:68
:17  %shift_reg_7_load = load i32* @shift_reg_7, align 4

ST_7: StgValue_44 (32)  [1/1] 0.00ns  loc: fir.c:68
:18  store i32 %shift_reg_7_load, i32* @shift_reg_8, align 16

ST_7: tmp_6_2 (35)  [3/3] 8.43ns  loc: fir.c:71
:21  %tmp_6_2 = mul nsw i32 %shift_reg_7_load, %c_load_2

ST_7: shift_reg_6_load (36)  [1/1] 0.00ns  loc: fir.c:68
:22  %shift_reg_6_load = load i32* @shift_reg_6, align 8

ST_7: StgValue_47 (37)  [1/1] 0.00ns  loc: fir.c:68
:23  store i32 %shift_reg_6_load, i32* @shift_reg_7, align 4

ST_7: tmp_6_3 (40)  [3/3] 8.43ns  loc: fir.c:71
:26  %tmp_6_3 = mul nsw i32 %shift_reg_6_load, %c_load_3

ST_7: shift_reg_5_load (41)  [1/1] 0.00ns  loc: fir.c:68
:27  %shift_reg_5_load = load i32* @shift_reg_5, align 4

ST_7: StgValue_50 (42)  [1/1] 0.00ns  loc: fir.c:68
:28  store i32 %shift_reg_5_load, i32* @shift_reg_6, align 8

ST_7: tmp_6_4 (45)  [3/3] 8.43ns  loc: fir.c:71
:31  %tmp_6_4 = mul nsw i32 %shift_reg_5_load, %c_load_4

ST_7: c_load_5 (49)  [1/2] 2.39ns  loc: fir.c:71
:35  %c_load_5 = load i32* %c_addr_5, align 4

ST_7: c_addr_6 (53)  [1/1] 0.00ns  loc: fir.c:71
:39  %c_addr_6 = getelementptr [11 x i32]* %c, i64 0, i64 4

ST_7: c_load_6 (54)  [2/2] 2.39ns  loc: fir.c:71
:40  %c_load_6 = load i32* %c_addr_6, align 4

ST_7: tmp1 (75)  [1/1] 1.60ns  loc: fir.c:71
:61  %tmp1 = add i32 %tmp_6, %tmp_6_1


 <State 8>: 8.43ns
ST_8: tmp_6_2 (35)  [2/3] 8.43ns  loc: fir.c:71
:21  %tmp_6_2 = mul nsw i32 %shift_reg_7_load, %c_load_2

ST_8: tmp_6_3 (40)  [2/3] 8.43ns  loc: fir.c:71
:26  %tmp_6_3 = mul nsw i32 %shift_reg_6_load, %c_load_3

ST_8: tmp_6_4 (45)  [2/3] 8.43ns  loc: fir.c:71
:31  %tmp_6_4 = mul nsw i32 %shift_reg_5_load, %c_load_4

ST_8: c_load_6 (54)  [1/2] 2.39ns  loc: fir.c:71
:40  %c_load_6 = load i32* %c_addr_6, align 4

ST_8: c_addr_7 (58)  [1/1] 0.00ns  loc: fir.c:71
:44  %c_addr_7 = getelementptr [11 x i32]* %c, i64 0, i64 3

ST_8: c_load_7 (59)  [2/2] 2.39ns  loc: fir.c:71
:45  %c_load_7 = load i32* %c_addr_7, align 4


 <State 9>: 8.43ns
ST_9: tmp_6_2 (35)  [1/3] 8.43ns  loc: fir.c:71
:21  %tmp_6_2 = mul nsw i32 %shift_reg_7_load, %c_load_2

ST_9: tmp_6_3 (40)  [1/3] 8.43ns  loc: fir.c:71
:26  %tmp_6_3 = mul nsw i32 %shift_reg_6_load, %c_load_3

ST_9: tmp_6_4 (45)  [1/3] 8.43ns  loc: fir.c:71
:31  %tmp_6_4 = mul nsw i32 %shift_reg_5_load, %c_load_4

ST_9: c_load_7 (59)  [1/2] 2.39ns  loc: fir.c:71
:45  %c_load_7 = load i32* %c_addr_7, align 4

ST_9: c_addr_8 (63)  [1/1] 0.00ns  loc: fir.c:71
:49  %c_addr_8 = getelementptr [11 x i32]* %c, i64 0, i64 2

ST_9: c_load_8 (64)  [2/2] 2.39ns  loc: fir.c:71
:50  %c_load_8 = load i32* %c_addr_8, align 4


 <State 10>: 8.43ns
ST_10: shift_reg_4_load (46)  [1/1] 0.00ns  loc: fir.c:68
:32  %shift_reg_4_load = load i32* @shift_reg_4, align 16

ST_10: StgValue_69 (47)  [1/1] 0.00ns  loc: fir.c:68
:33  store i32 %shift_reg_4_load, i32* @shift_reg_5, align 4

ST_10: tmp_6_5 (50)  [3/3] 8.43ns  loc: fir.c:71
:36  %tmp_6_5 = mul nsw i32 %shift_reg_4_load, %c_load_5

ST_10: shift_reg_3_load (51)  [1/1] 0.00ns  loc: fir.c:68
:37  %shift_reg_3_load = load i32* @shift_reg_3, align 4

ST_10: StgValue_72 (52)  [1/1] 0.00ns  loc: fir.c:68
:38  store i32 %shift_reg_3_load, i32* @shift_reg_4, align 16

ST_10: tmp_6_6 (55)  [3/3] 8.43ns  loc: fir.c:71
:41  %tmp_6_6 = mul nsw i32 %shift_reg_3_load, %c_load_6

ST_10: shift_reg_2_load (56)  [1/1] 0.00ns  loc: fir.c:68
:42  %shift_reg_2_load = load i32* @shift_reg_2, align 8

ST_10: StgValue_75 (57)  [1/1] 0.00ns  loc: fir.c:68
:43  store i32 %shift_reg_2_load, i32* @shift_reg_3, align 4

ST_10: tmp_6_7 (60)  [3/3] 8.43ns  loc: fir.c:71
:46  %tmp_6_7 = mul nsw i32 %shift_reg_2_load, %c_load_7

ST_10: c_load_8 (64)  [1/2] 2.39ns  loc: fir.c:71
:50  %c_load_8 = load i32* %c_addr_8, align 4

ST_10: c_addr_9 (68)  [1/1] 0.00ns  loc: fir.c:71
:54  %c_addr_9 = getelementptr [11 x i32]* %c, i64 0, i64 1

ST_10: c_load_9 (69)  [2/2] 2.39ns  loc: fir.c:71
:55  %c_load_9 = load i32* %c_addr_9, align 4

ST_10: tmp3 (76)  [1/1] 1.37ns  loc: fir.c:71
:62  %tmp3 = add i32 %tmp_6_3, %tmp_6_4

ST_10: tmp2 (77)  [1/1] 1.37ns  loc: fir.c:71
:63  %tmp2 = add i32 %tmp3, %tmp_6_2


 <State 11>: 8.43ns
ST_11: tmp_6_5 (50)  [2/3] 8.43ns  loc: fir.c:71
:36  %tmp_6_5 = mul nsw i32 %shift_reg_4_load, %c_load_5

ST_11: tmp_6_6 (55)  [2/3] 8.43ns  loc: fir.c:71
:41  %tmp_6_6 = mul nsw i32 %shift_reg_3_load, %c_load_6

ST_11: tmp_6_7 (60)  [2/3] 8.43ns  loc: fir.c:71
:46  %tmp_6_7 = mul nsw i32 %shift_reg_2_load, %c_load_7

ST_11: c_load_9 (69)  [1/2] 2.39ns  loc: fir.c:71
:55  %c_load_9 = load i32* %c_addr_9, align 4

ST_11: c_addr_10 (72)  [1/1] 0.00ns  loc: fir.c:71
:58  %c_addr_10 = getelementptr [11 x i32]* %c, i64 0, i64 0

ST_11: c_load_10 (73)  [2/2] 2.39ns  loc: fir.c:71
:59  %c_load_10 = load i32* %c_addr_10, align 4


 <State 12>: 8.43ns
ST_12: tmp_6_5 (50)  [1/3] 8.43ns  loc: fir.c:71
:36  %tmp_6_5 = mul nsw i32 %shift_reg_4_load, %c_load_5

ST_12: tmp_6_6 (55)  [1/3] 8.43ns  loc: fir.c:71
:41  %tmp_6_6 = mul nsw i32 %shift_reg_3_load, %c_load_6

ST_12: tmp_6_7 (60)  [1/3] 8.43ns  loc: fir.c:71
:46  %tmp_6_7 = mul nsw i32 %shift_reg_2_load, %c_load_7

ST_12: c_load_10 (73)  [1/2] 2.39ns  loc: fir.c:71
:59  %c_load_10 = load i32* %c_addr_10, align 4


 <State 13>: 8.43ns
ST_13: x_read (18)  [1/1] 0.00ns
:4  %x_read = call i32 @_ssdm_op_Read.ap_vld.i32(i32 %x) nounwind

ST_13: shift_reg_1_load (61)  [1/1] 0.00ns  loc: fir.c:68
:47  %shift_reg_1_load = load i32* @shift_reg_1, align 4

ST_13: StgValue_94 (62)  [1/1] 0.00ns  loc: fir.c:68
:48  store i32 %shift_reg_1_load, i32* @shift_reg_2, align 8

ST_13: tmp_6_8 (65)  [3/3] 8.43ns  loc: fir.c:71
:51  %tmp_6_8 = mul nsw i32 %shift_reg_1_load, %c_load_8

ST_13: shift_reg_0_load (66)  [1/1] 0.00ns  loc: fir.c:68
:52  %shift_reg_0_load = load i32* @shift_reg_0, align 16

ST_13: StgValue_97 (67)  [1/1] 0.00ns  loc: fir.c:68
:53  store i32 %shift_reg_0_load, i32* @shift_reg_1, align 4

ST_13: tmp_6_9 (70)  [3/3] 8.43ns  loc: fir.c:71
:56  %tmp_6_9 = mul nsw i32 %shift_reg_0_load, %c_load_9

ST_13: StgValue_99 (71)  [1/1] 0.00ns  loc: fir.c:65
:57  store i32 %x_read, i32* @shift_reg_0, align 16

ST_13: tmp_6_s (74)  [3/3] 8.43ns  loc: fir.c:71
:60  %tmp_6_s = mul nsw i32 %c_load_10, %x_read

ST_13: tmp6 (79)  [1/1] 1.60ns  loc: fir.c:71
:65  %tmp6 = add i32 %tmp_6_6, %tmp_6_7


 <State 14>: 8.43ns
ST_14: tmp_6_8 (65)  [2/3] 8.43ns  loc: fir.c:71
:51  %tmp_6_8 = mul nsw i32 %shift_reg_1_load, %c_load_8

ST_14: tmp_6_9 (70)  [2/3] 8.43ns  loc: fir.c:71
:56  %tmp_6_9 = mul nsw i32 %shift_reg_0_load, %c_load_9

ST_14: tmp_6_s (74)  [2/3] 8.43ns  loc: fir.c:71
:60  %tmp_6_s = mul nsw i32 %c_load_10, %x_read


 <State 15>: 8.43ns
ST_15: tmp_6_8 (65)  [1/3] 8.43ns  loc: fir.c:71
:51  %tmp_6_8 = mul nsw i32 %shift_reg_1_load, %c_load_8

ST_15: tmp_6_9 (70)  [1/3] 8.43ns  loc: fir.c:71
:56  %tmp_6_9 = mul nsw i32 %shift_reg_0_load, %c_load_9

ST_15: tmp_6_s (74)  [1/3] 8.43ns  loc: fir.c:71
:60  %tmp_6_s = mul nsw i32 %c_load_10, %x_read


 <State 16>: 5.46ns
ST_16: StgValue_108 (14)  [1/1] 0.00ns
:0  call void (...)* @_ssdm_op_SpecBitsMap(i32* %y) nounwind, !map !7

ST_16: StgValue_109 (15)  [1/1] 0.00ns
:1  call void (...)* @_ssdm_op_SpecBitsMap([11 x i32]* %c) nounwind, !map !13

ST_16: StgValue_110 (16)  [1/1] 0.00ns
:2  call void (...)* @_ssdm_op_SpecBitsMap(i32 %x) nounwind, !map !19

ST_16: StgValue_111 (17)  [1/1] 0.00ns
:3  call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @fir_str) nounwind

ST_16: StgValue_112 (19)  [1/1] 0.00ns  loc: fir.c:53
:5  call void (...)* @_ssdm_op_SpecInterface(i32* %y, [7 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_16: StgValue_113 (20)  [1/1] 0.00ns  loc: fir.c:54
:6  call void (...)* @_ssdm_op_SpecInterface(i32 %x, [7 x i8]* @p_str, i32 0, i32 0, [1 x i8]* @p_str1, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, i32 0, i32 0, i32 0, i32 0, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_16: StgValue_114 (21)  [1/1] 0.00ns
:7  call void (...)* @_ssdm_op_SpecMemCore([11 x i32]* %c, [1 x i8]* @p_str1, [12 x i8]* @p_str2, [1 x i8]* @p_str1, i32 -1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1, [1 x i8]* @p_str1) nounwind

ST_16: tmp (78)  [1/1] 1.37ns  loc: fir.c:71
:64  %tmp = add i32 %tmp2, %tmp1

ST_16: tmp5 (80)  [1/1] 1.37ns  loc: fir.c:71
:66  %tmp5 = add i32 %tmp6, %tmp_6_5

ST_16: tmp8 (81)  [1/1] 1.37ns  loc: fir.c:71
:67  %tmp8 = add i32 %tmp_6_9, %tmp_6_s

ST_16: tmp7 (82)  [1/1] 1.37ns  loc: fir.c:71
:68  %tmp7 = add i32 %tmp8, %tmp_6_8

ST_16: tmp4 (83)  [1/1] 1.37ns  loc: fir.c:71
:69  %tmp4 = add i32 %tmp7, %tmp5

ST_16: acc_1_s (84)  [1/1] 1.37ns  loc: fir.c:71
:70  %acc_1_s = add nsw i32 %tmp4, %tmp

ST_16: StgValue_121 (85)  [1/1] 0.00ns  loc: fir.c:73
:71  call void @_ssdm_op_Write.ap_vld.i32P(i32* %y, i32 %acc_1_s) nounwind

ST_16: StgValue_122 (86)  [1/1] 0.00ns  loc: fir.c:74
:72  ret void



============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 2.39ns
The critical path consists of the following:
	'getelementptr' operation ('c_addr', fir.c:71) [23]  (0 ns)
	'load' operation ('c_load', fir.c:71) on array 'c' [24]  (2.39 ns)

 <State 2>: 2.39ns
The critical path consists of the following:
	'load' operation ('c_load', fir.c:71) on array 'c' [24]  (2.39 ns)

 <State 3>: 2.39ns
The critical path consists of the following:
	'load' operation ('c_load_1', fir.c:71) on array 'c' [29]  (2.39 ns)

 <State 4>: 8.43ns
The critical path consists of the following:
	'load' operation ('shift_reg_9_load', fir.c:68) on static variable 'shift_reg_9' [22]  (0 ns)
	'mul' operation ('tmp_6', fir.c:71) [25]  (8.43 ns)

 <State 5>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6', fir.c:71) [25]  (8.43 ns)

 <State 6>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6', fir.c:71) [25]  (8.43 ns)

 <State 7>: 8.43ns
The critical path consists of the following:
	'load' operation ('shift_reg_7_load', fir.c:68) on static variable 'shift_reg_7' [31]  (0 ns)
	'mul' operation ('tmp_6_2', fir.c:71) [35]  (8.43 ns)

 <State 8>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6_2', fir.c:71) [35]  (8.43 ns)

 <State 9>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6_2', fir.c:71) [35]  (8.43 ns)

 <State 10>: 8.43ns
The critical path consists of the following:
	'load' operation ('shift_reg_4_load', fir.c:68) on static variable 'shift_reg_4' [46]  (0 ns)
	'mul' operation ('tmp_6_5', fir.c:71) [50]  (8.43 ns)

 <State 11>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6_5', fir.c:71) [50]  (8.43 ns)

 <State 12>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6_5', fir.c:71) [50]  (8.43 ns)

 <State 13>: 8.43ns
The critical path consists of the following:
	wire read on port 'x' [18]  (0 ns)
	'mul' operation ('tmp_6_s', fir.c:71) [74]  (8.43 ns)

 <State 14>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6_8', fir.c:71) [65]  (8.43 ns)

 <State 15>: 8.43ns
The critical path consists of the following:
	'mul' operation ('tmp_6_8', fir.c:71) [65]  (8.43 ns)

 <State 16>: 5.46ns
The critical path consists of the following:
	'add' operation ('tmp8', fir.c:71) [81]  (1.37 ns)
	'add' operation ('tmp7', fir.c:71) [82]  (1.37 ns)
	'add' operation ('tmp4', fir.c:71) [83]  (1.37 ns)
	'add' operation ('acc_1_s', fir.c:71) [84]  (1.37 ns)


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4
	State 5
	State 6
	State 7
	State 8
	State 9
	State 10
	State 11
	State 12
	State 13
	State 14
	State 15
	State 16


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
