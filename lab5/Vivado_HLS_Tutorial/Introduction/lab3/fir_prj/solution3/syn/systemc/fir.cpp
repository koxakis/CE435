// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "fir.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic fir::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic fir::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<16> fir::ap_ST_fsm_state1 = "1";
const sc_lv<16> fir::ap_ST_fsm_state2 = "10";
const sc_lv<16> fir::ap_ST_fsm_state3 = "100";
const sc_lv<16> fir::ap_ST_fsm_state4 = "1000";
const sc_lv<16> fir::ap_ST_fsm_state5 = "10000";
const sc_lv<16> fir::ap_ST_fsm_state6 = "100000";
const sc_lv<16> fir::ap_ST_fsm_state7 = "1000000";
const sc_lv<16> fir::ap_ST_fsm_state8 = "10000000";
const sc_lv<16> fir::ap_ST_fsm_state9 = "100000000";
const sc_lv<16> fir::ap_ST_fsm_state10 = "1000000000";
const sc_lv<16> fir::ap_ST_fsm_state11 = "10000000000";
const sc_lv<16> fir::ap_ST_fsm_state12 = "100000000000";
const sc_lv<16> fir::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<16> fir::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<16> fir::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<16> fir::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<32> fir::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> fir::ap_const_lv1_1 = "1";
const sc_lv<32> fir::ap_const_lv32_C = "1100";
const sc_lv<32> fir::ap_const_lv32_1 = "1";
const sc_lv<32> fir::ap_const_lv32_5 = "101";
const sc_lv<32> fir::ap_const_lv32_8 = "1000";
const sc_lv<32> fir::ap_const_lv32_B = "1011";
const sc_lv<32> fir::ap_const_lv32_2 = "10";
const sc_lv<32> fir::ap_const_lv32_6 = "110";
const sc_lv<32> fir::ap_const_lv32_3 = "11";
const sc_lv<32> fir::ap_const_lv32_9 = "1001";
const sc_lv<32> fir::ap_const_lv32_4 = "100";
const sc_lv<32> fir::ap_const_lv32_A = "1010";
const sc_lv<32> fir::ap_const_lv32_7 = "111";
const sc_lv<32> fir::ap_const_lv32_E = "1110";
const sc_lv<64> fir::ap_const_lv64_A = "1010";
const sc_lv<64> fir::ap_const_lv64_9 = "1001";
const sc_lv<64> fir::ap_const_lv64_8 = "1000";
const sc_lv<64> fir::ap_const_lv64_7 = "111";
const sc_lv<64> fir::ap_const_lv64_6 = "110";
const sc_lv<64> fir::ap_const_lv64_5 = "101";
const sc_lv<64> fir::ap_const_lv64_4 = "100";
const sc_lv<64> fir::ap_const_lv64_3 = "11";
const sc_lv<64> fir::ap_const_lv64_2 = "10";
const sc_lv<64> fir::ap_const_lv64_1 = "1";
const sc_lv<64> fir::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<32> fir::ap_const_lv32_F = "1111";
const sc_lv<32> fir::ap_const_lv32_D = "1101";

fir::fir(sc_module_name name) : sc_module(name), mVcdFile(0) {
    fir_mul_32s_32s_3bkb_U1 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U1");
    fir_mul_32s_32s_3bkb_U1->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U1->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U1->din0(shift_reg_9);
    fir_mul_32s_32s_3bkb_U1->din1(reg_188);
    fir_mul_32s_32s_3bkb_U1->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U1->dout(grp_fu_208_p2);
    fir_mul_32s_32s_3bkb_U2 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U2");
    fir_mul_32s_32s_3bkb_U2->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U2->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U2->din0(shift_reg_8);
    fir_mul_32s_32s_3bkb_U2->din1(reg_192);
    fir_mul_32s_32s_3bkb_U2->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U2->dout(grp_fu_224_p2);
    fir_mul_32s_32s_3bkb_U3 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U3");
    fir_mul_32s_32s_3bkb_U3->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U3->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U3->din0(shift_reg_7);
    fir_mul_32s_32s_3bkb_U3->din1(reg_196);
    fir_mul_32s_32s_3bkb_U3->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U3->dout(grp_fu_240_p2);
    fir_mul_32s_32s_3bkb_U4 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U4");
    fir_mul_32s_32s_3bkb_U4->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U4->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U4->din0(shift_reg_6);
    fir_mul_32s_32s_3bkb_U4->din1(reg_200);
    fir_mul_32s_32s_3bkb_U4->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U4->dout(grp_fu_256_p2);
    fir_mul_32s_32s_3bkb_U5 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U5");
    fir_mul_32s_32s_3bkb_U5->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U5->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U5->din0(shift_reg_5);
    fir_mul_32s_32s_3bkb_U5->din1(reg_188);
    fir_mul_32s_32s_3bkb_U5->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U5->dout(grp_fu_272_p2);
    fir_mul_32s_32s_3bkb_U6 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U6");
    fir_mul_32s_32s_3bkb_U6->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U6->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U6->din0(shift_reg_4);
    fir_mul_32s_32s_3bkb_U6->din1(reg_192);
    fir_mul_32s_32s_3bkb_U6->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U6->dout(grp_fu_292_p2);
    fir_mul_32s_32s_3bkb_U7 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U7");
    fir_mul_32s_32s_3bkb_U7->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U7->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U7->din0(shift_reg_3);
    fir_mul_32s_32s_3bkb_U7->din1(c_load_6_reg_491);
    fir_mul_32s_32s_3bkb_U7->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U7->dout(grp_fu_308_p2);
    fir_mul_32s_32s_3bkb_U8 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U8");
    fir_mul_32s_32s_3bkb_U8->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U8->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U8->din0(shift_reg_2);
    fir_mul_32s_32s_3bkb_U8->din1(reg_188);
    fir_mul_32s_32s_3bkb_U8->ce(ap_var_for_const0);
    fir_mul_32s_32s_3bkb_U8->dout(grp_fu_323_p2);
    fir_mul_32s_32s_3bkb_U9 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U9");
    fir_mul_32s_32s_3bkb_U9->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U9->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U9->din0(shift_reg_1);
    fir_mul_32s_32s_3bkb_U9->din1(reg_196);
    fir_mul_32s_32s_3bkb_U9->ce(grp_fu_348_ce);
    fir_mul_32s_32s_3bkb_U9->dout(grp_fu_348_p2);
    fir_mul_32s_32s_3bkb_U10 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U10");
    fir_mul_32s_32s_3bkb_U10->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U10->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U10->din0(shift_reg_0);
    fir_mul_32s_32s_3bkb_U10->din1(reg_200);
    fir_mul_32s_32s_3bkb_U10->ce(grp_fu_364_ce);
    fir_mul_32s_32s_3bkb_U10->dout(grp_fu_364_p2);
    fir_mul_32s_32s_3bkb_U11 = new fir_mul_32s_32s_3bkb<1,3,32,32,32>("fir_mul_32s_32s_3bkb_U11");
    fir_mul_32s_32s_3bkb_U11->clk(ap_clk);
    fir_mul_32s_32s_3bkb_U11->reset(ap_rst);
    fir_mul_32s_32s_3bkb_U11->din0(reg_188);
    fir_mul_32s_32s_3bkb_U11->din1(x_in_sig);
    fir_mul_32s_32s_3bkb_U11->ce(grp_fu_376_ce);
    fir_mul_32s_32s_3bkb_U11->dout(grp_fu_376_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state10);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state11);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state12);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state13);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state14);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state15);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state16);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_c_address0);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_c_ce0);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( ap_CS_fsm_state9 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_CS_fsm_state7 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state10 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( ap_CS_fsm_state11 );
    sensitive << ( ap_CS_fsm_state8 );

    SC_METHOD(thread_grp_fu_348_ce);
    sensitive << ( x_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_364_ce);
    sensitive << ( x_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_grp_fu_376_ce);
    sensitive << ( x_ap_vld_in_sig );
    sensitive << ( ap_CS_fsm_state13 );
    sensitive << ( ap_CS_fsm_state15 );
    sensitive << ( ap_CS_fsm_state14 );

    SC_METHOD(thread_tmp1_fu_278_p2);
    sensitive << ( tmp_6_reg_451 );
    sensitive << ( tmp_6_1_reg_456 );

    SC_METHOD(thread_tmp2_fu_333_p2);
    sensitive << ( tmp_6_2_reg_501 );
    sensitive << ( tmp3_fu_329_p2 );

    SC_METHOD(thread_tmp3_fu_329_p2);
    sensitive << ( tmp_6_3_reg_506 );
    sensitive << ( tmp_6_4_reg_511 );

    SC_METHOD(thread_tmp4_fu_403_p2);
    sensitive << ( tmp7_fu_398_p2 );
    sensitive << ( tmp5_fu_390_p2 );

    SC_METHOD(thread_tmp5_fu_390_p2);
    sensitive << ( tmp_6_5_reg_551 );
    sensitive << ( tmp6_reg_581 );

    SC_METHOD(thread_tmp6_fu_382_p2);
    sensitive << ( tmp_6_6_reg_556 );
    sensitive << ( tmp_6_7_reg_561 );

    SC_METHOD(thread_tmp7_fu_398_p2);
    sensitive << ( tmp_6_8_reg_586 );
    sensitive << ( tmp8_fu_394_p2 );

    SC_METHOD(thread_tmp8_fu_394_p2);
    sensitive << ( tmp_6_9_reg_591 );
    sensitive << ( tmp_6_s_reg_596 );

    SC_METHOD(thread_tmp_fu_386_p2);
    sensitive << ( tmp1_reg_486 );
    sensitive << ( tmp2_reg_541 );

    SC_METHOD(thread_x_ap_vld_in_sig);
    sensitive << ( x_ap_vld );
    sensitive << ( x_ap_vld_preg );

    SC_METHOD(thread_x_blk_n);
    sensitive << ( x_ap_vld );
    sensitive << ( ap_CS_fsm_state13 );

    SC_METHOD(thread_x_in_sig);
    sensitive << ( x );
    sensitive << ( x_preg );
    sensitive << ( x_ap_vld );

    SC_METHOD(thread_y);
    sensitive << ( ap_CS_fsm_state16 );
    sensitive << ( tmp4_fu_403_p2 );
    sensitive << ( tmp_fu_386_p2 );

    SC_METHOD(thread_y_ap_vld);
    sensitive << ( ap_CS_fsm_state16 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( x_ap_vld_in_sig );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_CS_fsm = "0000000000000001";
    x_preg = "00000000000000000000000000000000";
    x_ap_vld_preg = SC_LOGIC_0;
    shift_reg_9 = "00000000000000000000000000000000";
    shift_reg_8 = "00000000000000000000000000000000";
    shift_reg_7 = "00000000000000000000000000000000";
    shift_reg_6 = "00000000000000000000000000000000";
    shift_reg_5 = "00000000000000000000000000000000";
    shift_reg_4 = "00000000000000000000000000000000";
    shift_reg_3 = "00000000000000000000000000000000";
    shift_reg_2 = "00000000000000000000000000000000";
    shift_reg_1 = "00000000000000000000000000000000";
    shift_reg_0 = "00000000000000000000000000000000";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "fir_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, y, "(port)y");
    sc_trace(mVcdFile, y_ap_vld, "(port)y_ap_vld");
    sc_trace(mVcdFile, c_address0, "(port)c_address0");
    sc_trace(mVcdFile, c_ce0, "(port)c_ce0");
    sc_trace(mVcdFile, c_q0, "(port)c_q0");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, x_ap_vld, "(port)x_ap_vld");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, x_preg, "x_preg");
    sc_trace(mVcdFile, x_in_sig, "x_in_sig");
    sc_trace(mVcdFile, x_ap_vld_preg, "x_ap_vld_preg");
    sc_trace(mVcdFile, x_ap_vld_in_sig, "x_ap_vld_in_sig");
    sc_trace(mVcdFile, shift_reg_9, "shift_reg_9");
    sc_trace(mVcdFile, shift_reg_8, "shift_reg_8");
    sc_trace(mVcdFile, shift_reg_7, "shift_reg_7");
    sc_trace(mVcdFile, shift_reg_6, "shift_reg_6");
    sc_trace(mVcdFile, shift_reg_5, "shift_reg_5");
    sc_trace(mVcdFile, shift_reg_4, "shift_reg_4");
    sc_trace(mVcdFile, shift_reg_3, "shift_reg_3");
    sc_trace(mVcdFile, shift_reg_2, "shift_reg_2");
    sc_trace(mVcdFile, shift_reg_1, "shift_reg_1");
    sc_trace(mVcdFile, shift_reg_0, "shift_reg_0");
    sc_trace(mVcdFile, x_blk_n, "x_blk_n");
    sc_trace(mVcdFile, ap_CS_fsm_state13, "ap_CS_fsm_state13");
    sc_trace(mVcdFile, reg_188, "reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, ap_CS_fsm_state12, "ap_CS_fsm_state12");
    sc_trace(mVcdFile, reg_192, "reg_192");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, reg_196, "reg_196");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, ap_CS_fsm_state10, "ap_CS_fsm_state10");
    sc_trace(mVcdFile, reg_200, "reg_200");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, ap_CS_fsm_state11, "ap_CS_fsm_state11");
    sc_trace(mVcdFile, grp_fu_208_p2, "grp_fu_208_p2");
    sc_trace(mVcdFile, tmp_6_reg_451, "tmp_6_reg_451");
    sc_trace(mVcdFile, grp_fu_224_p2, "grp_fu_224_p2");
    sc_trace(mVcdFile, tmp_6_1_reg_456, "tmp_6_1_reg_456");
    sc_trace(mVcdFile, tmp1_fu_278_p2, "tmp1_fu_278_p2");
    sc_trace(mVcdFile, tmp1_reg_486, "tmp1_reg_486");
    sc_trace(mVcdFile, c_load_6_reg_491, "c_load_6_reg_491");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, grp_fu_240_p2, "grp_fu_240_p2");
    sc_trace(mVcdFile, tmp_6_2_reg_501, "tmp_6_2_reg_501");
    sc_trace(mVcdFile, grp_fu_256_p2, "grp_fu_256_p2");
    sc_trace(mVcdFile, tmp_6_3_reg_506, "tmp_6_3_reg_506");
    sc_trace(mVcdFile, grp_fu_272_p2, "grp_fu_272_p2");
    sc_trace(mVcdFile, tmp_6_4_reg_511, "tmp_6_4_reg_511");
    sc_trace(mVcdFile, tmp2_fu_333_p2, "tmp2_fu_333_p2");
    sc_trace(mVcdFile, tmp2_reg_541, "tmp2_reg_541");
    sc_trace(mVcdFile, grp_fu_292_p2, "grp_fu_292_p2");
    sc_trace(mVcdFile, tmp_6_5_reg_551, "tmp_6_5_reg_551");
    sc_trace(mVcdFile, grp_fu_308_p2, "grp_fu_308_p2");
    sc_trace(mVcdFile, tmp_6_6_reg_556, "tmp_6_6_reg_556");
    sc_trace(mVcdFile, grp_fu_323_p2, "grp_fu_323_p2");
    sc_trace(mVcdFile, tmp_6_7_reg_561, "tmp_6_7_reg_561");
    sc_trace(mVcdFile, tmp6_fu_382_p2, "tmp6_fu_382_p2");
    sc_trace(mVcdFile, tmp6_reg_581, "tmp6_reg_581");
    sc_trace(mVcdFile, grp_fu_348_p2, "grp_fu_348_p2");
    sc_trace(mVcdFile, tmp_6_8_reg_586, "tmp_6_8_reg_586");
    sc_trace(mVcdFile, ap_CS_fsm_state15, "ap_CS_fsm_state15");
    sc_trace(mVcdFile, grp_fu_364_p2, "grp_fu_364_p2");
    sc_trace(mVcdFile, tmp_6_9_reg_591, "tmp_6_9_reg_591");
    sc_trace(mVcdFile, grp_fu_376_p2, "grp_fu_376_p2");
    sc_trace(mVcdFile, tmp_6_s_reg_596, "tmp_6_s_reg_596");
    sc_trace(mVcdFile, ap_CS_fsm_state16, "ap_CS_fsm_state16");
    sc_trace(mVcdFile, tmp3_fu_329_p2, "tmp3_fu_329_p2");
    sc_trace(mVcdFile, tmp8_fu_394_p2, "tmp8_fu_394_p2");
    sc_trace(mVcdFile, tmp7_fu_398_p2, "tmp7_fu_398_p2");
    sc_trace(mVcdFile, tmp5_fu_390_p2, "tmp5_fu_390_p2");
    sc_trace(mVcdFile, tmp4_fu_403_p2, "tmp4_fu_403_p2");
    sc_trace(mVcdFile, tmp_fu_386_p2, "tmp_fu_386_p2");
    sc_trace(mVcdFile, grp_fu_348_ce, "grp_fu_348_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state14, "ap_CS_fsm_state14");
    sc_trace(mVcdFile, grp_fu_364_ce, "grp_fu_364_ce");
    sc_trace(mVcdFile, grp_fu_376_ce, "grp_fu_376_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("fir.hdltvin.dat");
    mHdltvoutHandle.open("fir.hdltvout.dat");
}

fir::~fir() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete fir_mul_32s_32s_3bkb_U1;
    delete fir_mul_32s_32s_3bkb_U2;
    delete fir_mul_32s_32s_3bkb_U3;
    delete fir_mul_32s_32s_3bkb_U4;
    delete fir_mul_32s_32s_3bkb_U5;
    delete fir_mul_32s_32s_3bkb_U6;
    delete fir_mul_32s_32s_3bkb_U7;
    delete fir_mul_32s_32s_3bkb_U8;
    delete fir_mul_32s_32s_3bkb_U9;
    delete fir_mul_32s_32s_3bkb_U10;
    delete fir_mul_32s_32s_3bkb_U11;
}

void fir::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void fir::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        x_ap_vld_preg = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
            x_ap_vld_preg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, x_ap_vld.read()) && 
                    !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)))) {
            x_ap_vld_preg = x_ap_vld.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        x_preg = ap_const_lv32_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, x_ap_vld.read()) && 
             !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1)))) {
            x_preg = x.read();
        }
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        c_load_6_reg_491 = c_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read())))) {
        reg_188 = c_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())))) {
        reg_192 = c_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())))) {
        reg_196 = c_q0.read();
    }
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())))) {
        reg_200 = c_q0.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && !esl_seteq<1,1,1>(x_ap_vld_in_sig.read(), ap_const_logic_0))) {
        shift_reg_0 = x_in_sig.read();
        shift_reg_1 = shift_reg_0.read();
        shift_reg_2 = shift_reg_1.read();
        tmp6_reg_581 = tmp6_fu_382_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        shift_reg_3 = shift_reg_2.read();
        shift_reg_4 = shift_reg_3.read();
        shift_reg_5 = shift_reg_4.read();
        tmp2_reg_541 = tmp2_fu_333_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        shift_reg_6 = shift_reg_5.read();
        shift_reg_7 = shift_reg_6.read();
        shift_reg_8 = shift_reg_7.read();
        tmp1_reg_486 = tmp1_fu_278_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        shift_reg_9 = shift_reg_8.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        tmp_6_1_reg_456 = grp_fu_224_p2.read();
        tmp_6_reg_451 = grp_fu_208_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        tmp_6_2_reg_501 = grp_fu_240_p2.read();
        tmp_6_3_reg_506 = grp_fu_256_p2.read();
        tmp_6_4_reg_511 = grp_fu_272_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state12.read()))) {
        tmp_6_5_reg_551 = grp_fu_292_p2.read();
        tmp_6_6_reg_556 = grp_fu_308_p2.read();
        tmp_6_7_reg_561 = grp_fu_323_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()))) {
        tmp_6_8_reg_586 = grp_fu_348_p2.read();
        tmp_6_9_reg_591 = grp_fu_364_p2.read();
        tmp_6_s_reg_596 = grp_fu_376_p2.read();
    }
}

void fir::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read().range(0, 0);
}

void fir::thread_ap_CS_fsm_state10() {
    ap_CS_fsm_state10 = ap_CS_fsm.read().range(9, 9);
}

void fir::thread_ap_CS_fsm_state11() {
    ap_CS_fsm_state11 = ap_CS_fsm.read().range(10, 10);
}

void fir::thread_ap_CS_fsm_state12() {
    ap_CS_fsm_state12 = ap_CS_fsm.read().range(11, 11);
}

void fir::thread_ap_CS_fsm_state13() {
    ap_CS_fsm_state13 = ap_CS_fsm.read().range(12, 12);
}

void fir::thread_ap_CS_fsm_state14() {
    ap_CS_fsm_state14 = ap_CS_fsm.read().range(13, 13);
}

void fir::thread_ap_CS_fsm_state15() {
    ap_CS_fsm_state15 = ap_CS_fsm.read().range(14, 14);
}

void fir::thread_ap_CS_fsm_state16() {
    ap_CS_fsm_state16 = ap_CS_fsm.read().range(15, 15);
}

void fir::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read().range(1, 1);
}

void fir::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read().range(2, 2);
}

void fir::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read().range(3, 3);
}

void fir::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read().range(4, 4);
}

void fir::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read().range(5, 5);
}

void fir::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read().range(6, 6);
}

void fir::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read().range(7, 7);
}

void fir::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read().range(8, 8);
}

void fir::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void fir::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void fir::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void fir::thread_c_address0() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_0);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_1);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_2);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_3);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_4);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_5);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_6);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_7);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_8);
    } else if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read()))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_9);
    } else if ((esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1))) {
        c_address0 =  (sc_lv<4>) (ap_const_lv64_A);
    } else {
        c_address0 = "XXXX";
    }
}

void fir::thread_c_ce0() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state2.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state6.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state9.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state3.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state7.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state4.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state10.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state5.read())) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state11.read())) || 
         (esl_seteq<1,1,1>(ap_CS_fsm_state1.read(), ap_const_lv1_1) && 
          !esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) || 
         (esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state8.read())))) {
        c_ce0 = ap_const_logic_1;
    } else {
        c_ce0 = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_348_ce() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
          !esl_seteq<1,1,1>(x_ap_vld_in_sig.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        grp_fu_348_ce = ap_const_logic_1;
    } else {
        grp_fu_348_ce = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_364_ce() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
          !esl_seteq<1,1,1>(x_ap_vld_in_sig.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        grp_fu_364_ce = ap_const_logic_1;
    } else {
        grp_fu_364_ce = ap_const_logic_0;
    }
}

void fir::thread_grp_fu_376_ce() {
    if (((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()) && 
          !esl_seteq<1,1,1>(x_ap_vld_in_sig.read(), ap_const_logic_0)) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state15.read()) || 
         esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state14.read()))) {
        grp_fu_376_ce = ap_const_logic_1;
    } else {
        grp_fu_376_ce = ap_const_logic_0;
    }
}

void fir::thread_tmp1_fu_278_p2() {
    tmp1_fu_278_p2 = (!tmp_6_reg_451.read().is_01() || !tmp_6_1_reg_456.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_reg_451.read()) + sc_biguint<32>(tmp_6_1_reg_456.read()));
}

void fir::thread_tmp2_fu_333_p2() {
    tmp2_fu_333_p2 = (!tmp3_fu_329_p2.read().is_01() || !tmp_6_2_reg_501.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp3_fu_329_p2.read()) + sc_biguint<32>(tmp_6_2_reg_501.read()));
}

void fir::thread_tmp3_fu_329_p2() {
    tmp3_fu_329_p2 = (!tmp_6_3_reg_506.read().is_01() || !tmp_6_4_reg_511.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_3_reg_506.read()) + sc_biguint<32>(tmp_6_4_reg_511.read()));
}

void fir::thread_tmp4_fu_403_p2() {
    tmp4_fu_403_p2 = (!tmp7_fu_398_p2.read().is_01() || !tmp5_fu_390_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp7_fu_398_p2.read()) + sc_biguint<32>(tmp5_fu_390_p2.read()));
}

void fir::thread_tmp5_fu_390_p2() {
    tmp5_fu_390_p2 = (!tmp6_reg_581.read().is_01() || !tmp_6_5_reg_551.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp6_reg_581.read()) + sc_biguint<32>(tmp_6_5_reg_551.read()));
}

void fir::thread_tmp6_fu_382_p2() {
    tmp6_fu_382_p2 = (!tmp_6_6_reg_556.read().is_01() || !tmp_6_7_reg_561.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_6_reg_556.read()) + sc_biguint<32>(tmp_6_7_reg_561.read()));
}

void fir::thread_tmp7_fu_398_p2() {
    tmp7_fu_398_p2 = (!tmp8_fu_394_p2.read().is_01() || !tmp_6_8_reg_586.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp8_fu_394_p2.read()) + sc_biguint<32>(tmp_6_8_reg_586.read()));
}

void fir::thread_tmp8_fu_394_p2() {
    tmp8_fu_394_p2 = (!tmp_6_9_reg_591.read().is_01() || !tmp_6_s_reg_596.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp_6_9_reg_591.read()) + sc_biguint<32>(tmp_6_s_reg_596.read()));
}

void fir::thread_tmp_fu_386_p2() {
    tmp_fu_386_p2 = (!tmp2_reg_541.read().is_01() || !tmp1_reg_486.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp2_reg_541.read()) + sc_biguint<32>(tmp1_reg_486.read()));
}

void fir::thread_x_ap_vld_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_ap_vld.read())) {
        x_ap_vld_in_sig = x_ap_vld.read();
    } else {
        x_ap_vld_in_sig = x_ap_vld_preg.read();
    }
}

void fir::thread_x_blk_n() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state13.read()))) {
        x_blk_n = x_ap_vld.read();
    } else {
        x_blk_n = ap_const_logic_1;
    }
}

void fir::thread_x_in_sig() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, x_ap_vld.read())) {
        x_in_sig = x.read();
    } else {
        x_in_sig = x_preg.read();
    }
}

void fir::thread_y() {
    y = (!tmp4_fu_403_p2.read().is_01() || !tmp_fu_386_p2.read().is_01())? sc_lv<32>(): (sc_biguint<32>(tmp4_fu_403_p2.read()) + sc_biguint<32>(tmp_fu_386_p2.read()));
}

void fir::thread_y_ap_vld() {
    if ((esl_seteq<1,1,1>(ap_const_lv1_1, ap_CS_fsm_state16.read()))) {
        y_ap_vld = ap_const_logic_1;
    } else {
        y_ap_vld = ap_const_logic_0;
    }
}

void fir::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if (!esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            ap_NS_fsm = ap_ST_fsm_state3;
            break;
        case 4 : 
            ap_NS_fsm = ap_ST_fsm_state4;
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            if (!esl_seteq<1,1,1>(x_ap_vld_in_sig.read(), ap_const_logic_0)) {
                ap_NS_fsm = ap_ST_fsm_state14;
            } else {
                ap_NS_fsm = ap_ST_fsm_state13;
            }
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state1;
            break;
        default : 
            ap_NS_fsm =  (sc_lv<16>) ("XXXXXXXXXXXXXXXX");
            break;
    }
}

void fir::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y\" :  \"" << y.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"y_ap_vld\" :  \"" << y_ap_vld.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_address0\" :  \"" << c_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"c_ce0\" :  \"" << c_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"c_q0\" :  \"" << c_q0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"x_ap_vld\" :  \"" << x_ap_vld.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

