// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module convolution2D_vert (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        posy,
        posx,
        m_axi_input_r_AWVALID,
        m_axi_input_r_AWREADY,
        m_axi_input_r_AWADDR,
        m_axi_input_r_AWID,
        m_axi_input_r_AWLEN,
        m_axi_input_r_AWSIZE,
        m_axi_input_r_AWBURST,
        m_axi_input_r_AWLOCK,
        m_axi_input_r_AWCACHE,
        m_axi_input_r_AWPROT,
        m_axi_input_r_AWQOS,
        m_axi_input_r_AWREGION,
        m_axi_input_r_AWUSER,
        m_axi_input_r_WVALID,
        m_axi_input_r_WREADY,
        m_axi_input_r_WDATA,
        m_axi_input_r_WSTRB,
        m_axi_input_r_WLAST,
        m_axi_input_r_WID,
        m_axi_input_r_WUSER,
        m_axi_input_r_ARVALID,
        m_axi_input_r_ARREADY,
        m_axi_input_r_ARADDR,
        m_axi_input_r_ARID,
        m_axi_input_r_ARLEN,
        m_axi_input_r_ARSIZE,
        m_axi_input_r_ARBURST,
        m_axi_input_r_ARLOCK,
        m_axi_input_r_ARCACHE,
        m_axi_input_r_ARPROT,
        m_axi_input_r_ARQOS,
        m_axi_input_r_ARREGION,
        m_axi_input_r_ARUSER,
        m_axi_input_r_RVALID,
        m_axi_input_r_RREADY,
        m_axi_input_r_RDATA,
        m_axi_input_r_RLAST,
        m_axi_input_r_RID,
        m_axi_input_r_RUSER,
        m_axi_input_r_RRESP,
        m_axi_input_r_BVALID,
        m_axi_input_r_BREADY,
        m_axi_input_r_BRESP,
        m_axi_input_r_BID,
        m_axi_input_r_BUSER,
        input1,
        ap_return
);

parameter    ap_ST_fsm_state1 = 15'b1;
parameter    ap_ST_fsm_state2 = 15'b10;
parameter    ap_ST_fsm_state3 = 15'b100;
parameter    ap_ST_fsm_state4 = 15'b1000;
parameter    ap_ST_fsm_state5 = 15'b10000;
parameter    ap_ST_fsm_state6 = 15'b100000;
parameter    ap_ST_fsm_state7 = 15'b1000000;
parameter    ap_ST_fsm_state8 = 15'b10000000;
parameter    ap_ST_fsm_state9 = 15'b100000000;
parameter    ap_ST_fsm_state10 = 15'b1000000000;
parameter    ap_ST_fsm_state11 = 15'b10000000000;
parameter    ap_ST_fsm_state12 = 15'b100000000000;
parameter    ap_ST_fsm_state13 = 15'b1000000000000;
parameter    ap_ST_fsm_state14 = 15'b10000000000000;
parameter    ap_ST_fsm_state15 = 15'b100000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_9 = 32'b1001;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_A = 32'b1010;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_B = 32'b1011;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv32_C = 32'b1100;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_D = 32'b1101;
parameter    ap_const_lv10_0 = 10'b0000000000;
parameter    ap_const_lv20_FFC00 = 20'b11111111110000000000;
parameter    ap_const_lv20_400 = 20'b10000000000;
parameter    ap_const_lv10_3FF = 10'b1111111111;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_13 = 32'b10011;
parameter    ap_const_lv32_E = 32'b1110;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [9:0] posy;
input  [9:0] posx;
output   m_axi_input_r_AWVALID;
input   m_axi_input_r_AWREADY;
output  [31:0] m_axi_input_r_AWADDR;
output  [0:0] m_axi_input_r_AWID;
output  [31:0] m_axi_input_r_AWLEN;
output  [2:0] m_axi_input_r_AWSIZE;
output  [1:0] m_axi_input_r_AWBURST;
output  [1:0] m_axi_input_r_AWLOCK;
output  [3:0] m_axi_input_r_AWCACHE;
output  [2:0] m_axi_input_r_AWPROT;
output  [3:0] m_axi_input_r_AWQOS;
output  [3:0] m_axi_input_r_AWREGION;
output  [0:0] m_axi_input_r_AWUSER;
output   m_axi_input_r_WVALID;
input   m_axi_input_r_WREADY;
output  [7:0] m_axi_input_r_WDATA;
output  [0:0] m_axi_input_r_WSTRB;
output   m_axi_input_r_WLAST;
output  [0:0] m_axi_input_r_WID;
output  [0:0] m_axi_input_r_WUSER;
output   m_axi_input_r_ARVALID;
input   m_axi_input_r_ARREADY;
output  [31:0] m_axi_input_r_ARADDR;
output  [0:0] m_axi_input_r_ARID;
output  [31:0] m_axi_input_r_ARLEN;
output  [2:0] m_axi_input_r_ARSIZE;
output  [1:0] m_axi_input_r_ARBURST;
output  [1:0] m_axi_input_r_ARLOCK;
output  [3:0] m_axi_input_r_ARCACHE;
output  [2:0] m_axi_input_r_ARPROT;
output  [3:0] m_axi_input_r_ARQOS;
output  [3:0] m_axi_input_r_ARREGION;
output  [0:0] m_axi_input_r_ARUSER;
input   m_axi_input_r_RVALID;
output   m_axi_input_r_RREADY;
input  [7:0] m_axi_input_r_RDATA;
input   m_axi_input_r_RLAST;
input  [0:0] m_axi_input_r_RID;
input  [0:0] m_axi_input_r_RUSER;
input  [1:0] m_axi_input_r_RRESP;
input   m_axi_input_r_BVALID;
output   m_axi_input_r_BREADY;
input  [1:0] m_axi_input_r_BRESP;
input  [0:0] m_axi_input_r_BID;
input  [0:0] m_axi_input_r_BUSER;
input  [31:0] input1;
output  [10:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg m_axi_input_r_ARVALID;
reg[31:0] m_axi_input_r_ARADDR;
reg m_axi_input_r_RREADY;

(* fsm_encoding = "none" *) reg   [14:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    input_r_blk_n_AR;
wire   [0:0] ap_CS_fsm_state2;
reg    input_r_blk_n_R;
wire   [0:0] ap_CS_fsm_state9;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] ap_CS_fsm_state10;
wire   [0:0] ap_CS_fsm_state4;
wire   [0:0] ap_CS_fsm_state11;
wire   [0:0] ap_CS_fsm_state5;
wire   [0:0] ap_CS_fsm_state12;
wire   [0:0] ap_CS_fsm_state6;
wire   [0:0] ap_CS_fsm_state13;
wire   [0:0] ap_CS_fsm_state7;
wire   [0:0] ap_CS_fsm_state14;
reg   [7:0] reg_86;
reg   [31:0] input_addr_reg_383;
reg   [31:0] input_addr_1_reg_389;
reg   [31:0] input_addr_2_reg_395;
reg   [31:0] input_addr_3_reg_401;
reg   [31:0] input_addr_4_reg_407;
reg   [31:0] input_addr_5_reg_413;
reg   [7:0] input_addr_1_read_reg_419;
reg   [7:0] input_addr_2_read_reg_424;
wire   [8:0] res_fu_321_p2;
reg   [8:0] res_reg_429;
wire   [9:0] res_1_fu_334_p2;
reg   [9:0] res_1_reg_434;
wire   [8:0] tmp_fu_347_p2;
reg   [8:0] tmp_reg_439;
wire  signed [63:0] sum_cast_fu_154_p1;
wire  signed [63:0] sum3_cast_fu_182_p1;
wire  signed [63:0] sum6_cast_fu_210_p1;
wire  signed [63:0] sum9_cast_fu_248_p1;
wire  signed [63:0] sum1_cast_fu_276_p1;
wire  signed [63:0] sum2_cast_fu_304_p1;
reg    ap_reg_ioackin_m_axi_input_r_ARREADY;
reg    ap_sig_ioackin_m_axi_input_r_ARREADY;
wire   [19:0] tmp_s_fu_90_p3;
wire   [19:0] posy0_fu_98_p2;
wire   [9:0] tmp_1_fu_122_p4;
wire   [9:0] posx0_fu_110_p2;
wire   [19:0] tmp_2_fu_132_p3;
wire  signed [32:0] sext_cast_fu_144_p1;
wire   [32:0] tmp_12_cast_fu_140_p1;
wire   [32:0] sum_fu_148_p2;
wire   [19:0] tmp_3_fu_164_p3;
wire   [32:0] tmp_14_cast_fu_172_p1;
wire   [32:0] sum3_fu_176_p2;
wire   [9:0] posx2_fu_116_p2;
wire   [19:0] tmp_6_fu_192_p3;
wire   [32:0] tmp_16_cast_fu_200_p1;
wire   [32:0] sum6_fu_204_p2;
wire   [19:0] posy2_fu_104_p2;
wire   [9:0] tmp_4_fu_220_p4;
wire   [19:0] tmp_7_fu_230_p3;
wire   [32:0] tmp_18_cast1_fu_238_p1;
wire   [32:0] sum9_fu_242_p2;
wire   [19:0] tmp_8_fu_258_p3;
wire   [32:0] tmp_20_cast_fu_266_p1;
wire   [32:0] sum1_fu_270_p2;
wire   [19:0] tmp_9_fu_286_p3;
wire   [32:0] tmp_22_cast_fu_294_p1;
wire   [32:0] sum2_fu_298_p2;
wire   [8:0] res_cast_fu_314_p1;
wire   [8:0] tmp_18_cast_fu_318_p1;
wire   [9:0] res_1_cast_fu_331_p1;
wire   [9:0] tmp_21_cast_fu_327_p1;
wire   [8:0] tmp_15_cast_fu_340_p1;
wire   [8:0] tmp_24_cast_fu_343_p1;
wire   [0:0] ap_CS_fsm_state15;
wire   [9:0] tmp_5_fu_357_p3;
wire  signed [10:0] tmp2_cast_fu_364_p1;
wire  signed [10:0] res_2_cast_cast_fu_368_p1;
wire   [10:0] res_2_fu_371_p2;
wire   [10:0] tmp_23_cast_fu_353_p1;
reg   [14:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 15'b1;
#0 ap_reg_ioackin_m_axi_input_r_ARREADY = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
    end else begin
        if ((((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state3) & ~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & ~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)))) begin
            ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b0;
        end else if ((((1'b1 == ap_CS_fsm_state2) & (1'b1 == m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state3) & (1'b1 == m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state4) & (1'b1 == m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & (1'b1 == m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b1 == m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'b1 == m_axi_input_r_ARREADY)))) begin
            ap_reg_ioackin_m_axi_input_r_ARREADY <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state10) & ~(m_axi_input_r_RVALID == 1'b0))) begin
        input_addr_1_read_reg_419 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        input_addr_1_reg_389 <= sum3_cast_fu_182_p1;
        input_addr_2_reg_395 <= sum6_cast_fu_210_p1;
        input_addr_3_reg_401 <= sum9_cast_fu_248_p1;
        input_addr_4_reg_407 <= sum1_cast_fu_276_p1;
        input_addr_5_reg_413 <= sum2_cast_fu_304_p1;
        input_addr_reg_383 <= sum_cast_fu_154_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state11) & ~(m_axi_input_r_RVALID == 1'b0))) begin
        input_addr_2_read_reg_424 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((((1'b1 == ap_CS_fsm_state9) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state13) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state14) & ~(m_axi_input_r_RVALID == 1'b0)))) begin
        reg_86 <= m_axi_input_r_RDATA;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(m_axi_input_r_RVALID == 1'b0))) begin
        res_1_reg_434 <= res_1_fu_334_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state12) & ~(m_axi_input_r_RVALID == 1'b0))) begin
        res_reg_429 <= res_fu_321_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state14) & ~(m_axi_input_r_RVALID == 1'b0))) begin
        tmp_reg_439 <= tmp_fu_347_p2;
    end
end

always @ (*) begin
    if ((((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1)) | (1'b1 == ap_CS_fsm_state15))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state15)) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = m_axi_input_r_ARREADY;
    end else begin
        ap_sig_ioackin_m_axi_input_r_ARREADY = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state7))) begin
        input_r_blk_n_AR = m_axi_input_r_ARREADY;
    end else begin
        input_r_blk_n_AR = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state14))) begin
        input_r_blk_n_R = m_axi_input_r_RVALID;
    end else begin
        input_r_blk_n_R = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            m_axi_input_r_ARADDR = input_addr_5_reg_413;
        end else if ((1'b1 == ap_CS_fsm_state6)) begin
            m_axi_input_r_ARADDR = input_addr_4_reg_407;
        end else if ((1'b1 == ap_CS_fsm_state5)) begin
            m_axi_input_r_ARADDR = input_addr_3_reg_401;
        end else if ((1'b1 == ap_CS_fsm_state4)) begin
            m_axi_input_r_ARADDR = input_addr_2_reg_395;
        end else if ((1'b1 == ap_CS_fsm_state3)) begin
            m_axi_input_r_ARADDR = input_addr_1_reg_389;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            m_axi_input_r_ARADDR = input_addr_reg_383;
        end else begin
            m_axi_input_r_ARADDR = 'bx;
        end
    end else begin
        m_axi_input_r_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state2) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state3) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state4) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state5) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state6) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)) | ((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_reg_ioackin_m_axi_input_r_ARREADY)))) begin
        m_axi_input_r_ARVALID = 1'b1;
    end else begin
        m_axi_input_r_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state9) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state12) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state13) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state14) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state10) & ~(m_axi_input_r_RVALID == 1'b0)) | ((1'b1 == ap_CS_fsm_state11) & ~(m_axi_input_r_RVALID == 1'b0)))) begin
        m_axi_input_r_RREADY = 1'b1;
    end else begin
        m_axi_input_r_RREADY = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(1'b0 == ap_sig_ioackin_m_axi_input_r_ARREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            if (~(m_axi_input_r_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state10 : begin
            if (~(m_axi_input_r_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state11 : begin
            if (~(m_axi_input_r_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end
        end
        ap_ST_fsm_state12 : begin
            if (~(m_axi_input_r_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state13 : begin
            if (~(m_axi_input_r_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        ap_ST_fsm_state14 : begin
            if (~(m_axi_input_r_RVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state15;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state14;
            end
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state1;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state10 = ap_CS_fsm[ap_const_lv32_9];

assign ap_CS_fsm_state11 = ap_CS_fsm[ap_const_lv32_A];

assign ap_CS_fsm_state12 = ap_CS_fsm[ap_const_lv32_B];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state14 = ap_CS_fsm[ap_const_lv32_D];

assign ap_CS_fsm_state15 = ap_CS_fsm[ap_const_lv32_E];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state9 = ap_CS_fsm[ap_const_lv32_8];

assign ap_return = (res_2_fu_371_p2 - tmp_23_cast_fu_353_p1);

assign m_axi_input_r_ARBURST = ap_const_lv2_0;

assign m_axi_input_r_ARCACHE = ap_const_lv4_0;

assign m_axi_input_r_ARID = 1'b0;

assign m_axi_input_r_ARLEN = ap_const_lv32_1;

assign m_axi_input_r_ARLOCK = ap_const_lv2_0;

assign m_axi_input_r_ARPROT = ap_const_lv3_0;

assign m_axi_input_r_ARQOS = ap_const_lv4_0;

assign m_axi_input_r_ARREGION = ap_const_lv4_0;

assign m_axi_input_r_ARSIZE = ap_const_lv3_0;

assign m_axi_input_r_ARUSER = 1'b0;

assign m_axi_input_r_AWADDR = ap_const_lv32_0;

assign m_axi_input_r_AWBURST = ap_const_lv2_0;

assign m_axi_input_r_AWCACHE = ap_const_lv4_0;

assign m_axi_input_r_AWID = 1'b0;

assign m_axi_input_r_AWLEN = ap_const_lv32_0;

assign m_axi_input_r_AWLOCK = ap_const_lv2_0;

assign m_axi_input_r_AWPROT = ap_const_lv3_0;

assign m_axi_input_r_AWQOS = ap_const_lv4_0;

assign m_axi_input_r_AWREGION = ap_const_lv4_0;

assign m_axi_input_r_AWSIZE = ap_const_lv3_0;

assign m_axi_input_r_AWUSER = 1'b0;

assign m_axi_input_r_AWVALID = 1'b0;

assign m_axi_input_r_BREADY = 1'b0;

assign m_axi_input_r_WDATA = ap_const_lv8_0;

assign m_axi_input_r_WID = 1'b0;

assign m_axi_input_r_WLAST = 1'b0;

assign m_axi_input_r_WSTRB = 1'b0;

assign m_axi_input_r_WUSER = 1'b0;

assign m_axi_input_r_WVALID = 1'b0;

assign posx0_fu_110_p2 = ($signed(posx) + $signed(ap_const_lv10_3FF));

assign posx2_fu_116_p2 = (posx + ap_const_lv10_1);

assign posy0_fu_98_p2 = ($signed(tmp_s_fu_90_p3) + $signed(ap_const_lv20_FFC00));

assign posy2_fu_104_p2 = (tmp_s_fu_90_p3 + ap_const_lv20_400);

assign res_1_cast_fu_331_p1 = res_reg_429;

assign res_1_fu_334_p2 = (res_1_cast_fu_331_p1 - tmp_21_cast_fu_327_p1);

assign res_2_cast_cast_fu_368_p1 = $signed(res_1_reg_434);

assign res_2_fu_371_p2 = ($signed(tmp2_cast_fu_364_p1) + $signed(res_2_cast_cast_fu_368_p1));

assign res_cast_fu_314_p1 = reg_86;

assign res_fu_321_p2 = (res_cast_fu_314_p1 + tmp_18_cast_fu_318_p1);

assign sext_cast_fu_144_p1 = $signed(input1);

assign sum1_cast_fu_276_p1 = $signed(sum1_fu_270_p2);

assign sum1_fu_270_p2 = ($signed(sext_cast_fu_144_p1) + $signed(tmp_20_cast_fu_266_p1));

assign sum2_cast_fu_304_p1 = $signed(sum2_fu_298_p2);

assign sum2_fu_298_p2 = ($signed(sext_cast_fu_144_p1) + $signed(tmp_22_cast_fu_294_p1));

assign sum3_cast_fu_182_p1 = $signed(sum3_fu_176_p2);

assign sum3_fu_176_p2 = ($signed(sext_cast_fu_144_p1) + $signed(tmp_14_cast_fu_172_p1));

assign sum6_cast_fu_210_p1 = $signed(sum6_fu_204_p2);

assign sum6_fu_204_p2 = ($signed(sext_cast_fu_144_p1) + $signed(tmp_16_cast_fu_200_p1));

assign sum9_cast_fu_248_p1 = $signed(sum9_fu_242_p2);

assign sum9_fu_242_p2 = ($signed(sext_cast_fu_144_p1) + $signed(tmp_18_cast1_fu_238_p1));

assign sum_cast_fu_154_p1 = $signed(sum_fu_148_p2);

assign sum_fu_148_p2 = ($signed(sext_cast_fu_144_p1) + $signed(tmp_12_cast_fu_140_p1));

assign tmp2_cast_fu_364_p1 = $signed(tmp_5_fu_357_p3);

assign tmp_12_cast_fu_140_p1 = tmp_2_fu_132_p3;

assign tmp_14_cast_fu_172_p1 = tmp_3_fu_164_p3;

assign tmp_15_cast_fu_340_p1 = input_addr_1_read_reg_419;

assign tmp_16_cast_fu_200_p1 = tmp_6_fu_192_p3;

assign tmp_18_cast1_fu_238_p1 = tmp_7_fu_230_p3;

assign tmp_18_cast_fu_318_p1 = input_addr_2_read_reg_424;

assign tmp_1_fu_122_p4 = {{posy0_fu_98_p2[ap_const_lv32_13 : ap_const_lv32_A]}};

assign tmp_20_cast_fu_266_p1 = tmp_8_fu_258_p3;

assign tmp_21_cast_fu_327_p1 = reg_86;

assign tmp_22_cast_fu_294_p1 = tmp_9_fu_286_p3;

assign tmp_23_cast_fu_353_p1 = reg_86;

assign tmp_24_cast_fu_343_p1 = reg_86;

assign tmp_2_fu_132_p3 = {{tmp_1_fu_122_p4}, {posx0_fu_110_p2}};

assign tmp_3_fu_164_p3 = {{tmp_1_fu_122_p4}, {posx}};

assign tmp_4_fu_220_p4 = {{posy2_fu_104_p2[ap_const_lv32_13 : ap_const_lv32_A]}};

assign tmp_5_fu_357_p3 = {{tmp_reg_439}, {1'b0}};

assign tmp_6_fu_192_p3 = {{tmp_1_fu_122_p4}, {posx2_fu_116_p2}};

assign tmp_7_fu_230_p3 = {{tmp_4_fu_220_p4}, {posx0_fu_110_p2}};

assign tmp_8_fu_258_p3 = {{tmp_4_fu_220_p4}, {posx}};

assign tmp_9_fu_286_p3 = {{tmp_4_fu_220_p4}, {posx2_fu_116_p2}};

assign tmp_fu_347_p2 = (tmp_15_cast_fu_340_p1 - tmp_24_cast_fu_343_p1);

assign tmp_s_fu_90_p3 = {{posy}, {ap_const_lv10_0}};

endmodule //convolution2D_vert
