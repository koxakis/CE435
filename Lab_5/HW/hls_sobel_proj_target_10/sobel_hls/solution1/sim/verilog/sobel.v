// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2016.4
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="sobel,hls_ip_2016_4,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=8.750000,HLS_SYN_LAT=40736921,HLS_SYN_TPT=none,HLS_SYN_MEM=4,HLS_SYN_DSP=0,HLS_SYN_FF=1914,HLS_SYN_LUT=2611}" *)

module sobel (
        ap_clk,
        ap_rst_n,
        m_axi_XSOBEL_INPUT_BUS_AWVALID,
        m_axi_XSOBEL_INPUT_BUS_AWREADY,
        m_axi_XSOBEL_INPUT_BUS_AWADDR,
        m_axi_XSOBEL_INPUT_BUS_AWID,
        m_axi_XSOBEL_INPUT_BUS_AWLEN,
        m_axi_XSOBEL_INPUT_BUS_AWSIZE,
        m_axi_XSOBEL_INPUT_BUS_AWBURST,
        m_axi_XSOBEL_INPUT_BUS_AWLOCK,
        m_axi_XSOBEL_INPUT_BUS_AWCACHE,
        m_axi_XSOBEL_INPUT_BUS_AWPROT,
        m_axi_XSOBEL_INPUT_BUS_AWQOS,
        m_axi_XSOBEL_INPUT_BUS_AWREGION,
        m_axi_XSOBEL_INPUT_BUS_AWUSER,
        m_axi_XSOBEL_INPUT_BUS_WVALID,
        m_axi_XSOBEL_INPUT_BUS_WREADY,
        m_axi_XSOBEL_INPUT_BUS_WDATA,
        m_axi_XSOBEL_INPUT_BUS_WSTRB,
        m_axi_XSOBEL_INPUT_BUS_WLAST,
        m_axi_XSOBEL_INPUT_BUS_WID,
        m_axi_XSOBEL_INPUT_BUS_WUSER,
        m_axi_XSOBEL_INPUT_BUS_ARVALID,
        m_axi_XSOBEL_INPUT_BUS_ARREADY,
        m_axi_XSOBEL_INPUT_BUS_ARADDR,
        m_axi_XSOBEL_INPUT_BUS_ARID,
        m_axi_XSOBEL_INPUT_BUS_ARLEN,
        m_axi_XSOBEL_INPUT_BUS_ARSIZE,
        m_axi_XSOBEL_INPUT_BUS_ARBURST,
        m_axi_XSOBEL_INPUT_BUS_ARLOCK,
        m_axi_XSOBEL_INPUT_BUS_ARCACHE,
        m_axi_XSOBEL_INPUT_BUS_ARPROT,
        m_axi_XSOBEL_INPUT_BUS_ARQOS,
        m_axi_XSOBEL_INPUT_BUS_ARREGION,
        m_axi_XSOBEL_INPUT_BUS_ARUSER,
        m_axi_XSOBEL_INPUT_BUS_RVALID,
        m_axi_XSOBEL_INPUT_BUS_RREADY,
        m_axi_XSOBEL_INPUT_BUS_RDATA,
        m_axi_XSOBEL_INPUT_BUS_RLAST,
        m_axi_XSOBEL_INPUT_BUS_RID,
        m_axi_XSOBEL_INPUT_BUS_RUSER,
        m_axi_XSOBEL_INPUT_BUS_RRESP,
        m_axi_XSOBEL_INPUT_BUS_BVALID,
        m_axi_XSOBEL_INPUT_BUS_BREADY,
        m_axi_XSOBEL_INPUT_BUS_BRESP,
        m_axi_XSOBEL_INPUT_BUS_BID,
        m_axi_XSOBEL_INPUT_BUS_BUSER,
        m_axi_XSOBEL_OUTPUT_BUS_AWVALID,
        m_axi_XSOBEL_OUTPUT_BUS_AWREADY,
        m_axi_XSOBEL_OUTPUT_BUS_AWADDR,
        m_axi_XSOBEL_OUTPUT_BUS_AWID,
        m_axi_XSOBEL_OUTPUT_BUS_AWLEN,
        m_axi_XSOBEL_OUTPUT_BUS_AWSIZE,
        m_axi_XSOBEL_OUTPUT_BUS_AWBURST,
        m_axi_XSOBEL_OUTPUT_BUS_AWLOCK,
        m_axi_XSOBEL_OUTPUT_BUS_AWCACHE,
        m_axi_XSOBEL_OUTPUT_BUS_AWPROT,
        m_axi_XSOBEL_OUTPUT_BUS_AWQOS,
        m_axi_XSOBEL_OUTPUT_BUS_AWREGION,
        m_axi_XSOBEL_OUTPUT_BUS_AWUSER,
        m_axi_XSOBEL_OUTPUT_BUS_WVALID,
        m_axi_XSOBEL_OUTPUT_BUS_WREADY,
        m_axi_XSOBEL_OUTPUT_BUS_WDATA,
        m_axi_XSOBEL_OUTPUT_BUS_WSTRB,
        m_axi_XSOBEL_OUTPUT_BUS_WLAST,
        m_axi_XSOBEL_OUTPUT_BUS_WID,
        m_axi_XSOBEL_OUTPUT_BUS_WUSER,
        m_axi_XSOBEL_OUTPUT_BUS_ARVALID,
        m_axi_XSOBEL_OUTPUT_BUS_ARREADY,
        m_axi_XSOBEL_OUTPUT_BUS_ARADDR,
        m_axi_XSOBEL_OUTPUT_BUS_ARID,
        m_axi_XSOBEL_OUTPUT_BUS_ARLEN,
        m_axi_XSOBEL_OUTPUT_BUS_ARSIZE,
        m_axi_XSOBEL_OUTPUT_BUS_ARBURST,
        m_axi_XSOBEL_OUTPUT_BUS_ARLOCK,
        m_axi_XSOBEL_OUTPUT_BUS_ARCACHE,
        m_axi_XSOBEL_OUTPUT_BUS_ARPROT,
        m_axi_XSOBEL_OUTPUT_BUS_ARQOS,
        m_axi_XSOBEL_OUTPUT_BUS_ARREGION,
        m_axi_XSOBEL_OUTPUT_BUS_ARUSER,
        m_axi_XSOBEL_OUTPUT_BUS_RVALID,
        m_axi_XSOBEL_OUTPUT_BUS_RREADY,
        m_axi_XSOBEL_OUTPUT_BUS_RDATA,
        m_axi_XSOBEL_OUTPUT_BUS_RLAST,
        m_axi_XSOBEL_OUTPUT_BUS_RID,
        m_axi_XSOBEL_OUTPUT_BUS_RUSER,
        m_axi_XSOBEL_OUTPUT_BUS_RRESP,
        m_axi_XSOBEL_OUTPUT_BUS_BVALID,
        m_axi_XSOBEL_OUTPUT_BUS_BREADY,
        m_axi_XSOBEL_OUTPUT_BUS_BRESP,
        m_axi_XSOBEL_OUTPUT_BUS_BID,
        m_axi_XSOBEL_OUTPUT_BUS_BUSER,
        s_axi_AXILiteS_AWVALID,
        s_axi_AXILiteS_AWREADY,
        s_axi_AXILiteS_AWADDR,
        s_axi_AXILiteS_WVALID,
        s_axi_AXILiteS_WREADY,
        s_axi_AXILiteS_WDATA,
        s_axi_AXILiteS_WSTRB,
        s_axi_AXILiteS_ARVALID,
        s_axi_AXILiteS_ARREADY,
        s_axi_AXILiteS_ARADDR,
        s_axi_AXILiteS_RVALID,
        s_axi_AXILiteS_RREADY,
        s_axi_AXILiteS_RDATA,
        s_axi_AXILiteS_RRESP,
        s_axi_AXILiteS_BVALID,
        s_axi_AXILiteS_BREADY,
        s_axi_AXILiteS_BRESP,
        interrupt
);

parameter    ap_ST_fsm_state1 = 13'b1;
parameter    ap_ST_fsm_state2 = 13'b10;
parameter    ap_ST_fsm_state3 = 13'b100;
parameter    ap_ST_fsm_state4 = 13'b1000;
parameter    ap_ST_fsm_state5 = 13'b10000;
parameter    ap_ST_fsm_state6 = 13'b100000;
parameter    ap_ST_fsm_state7 = 13'b1000000;
parameter    ap_ST_fsm_state8 = 13'b10000000;
parameter    ap_ST_fsm_state9 = 13'b100000000;
parameter    ap_ST_fsm_state10 = 13'b1000000000;
parameter    ap_ST_fsm_state11 = 13'b10000000000;
parameter    ap_ST_fsm_state12 = 13'b100000000000;
parameter    ap_ST_fsm_state13 = 13'b1000000000000;
parameter    ap_const_lv32_0 = 32'b00000000000000000000000000000000;
parameter    ap_const_lv32_6 = 32'b110;
parameter    ap_const_lv32_7 = 32'b111;
parameter    ap_const_lv32_C = 32'b1100;
parameter    C_S_AXI_AXILITES_DATA_WIDTH = 32;
parameter    ap_const_int64_8 = 8;
parameter    C_S_AXI_AXILITES_ADDR_WIDTH = 5;
parameter    C_S_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_DATA_WIDTH = 32;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_USER_VALUE = 0;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_XSOBEL_INPUT_BUS_CACHE_VALUE = 3;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_ID_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_ADDR_WIDTH = 32;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_DATA_WIDTH = 32;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_AWUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_ARUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_WUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_RUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_BUSER_WIDTH = 1;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_USER_VALUE = 0;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_PROT_VALUE = 0;
parameter    C_M_AXI_XSOBEL_OUTPUT_BUS_CACHE_VALUE = 3;
parameter    ap_const_lv32_2 = 32'b10;
parameter    ap_const_lv32_3 = 32'b11;
parameter    ap_const_lv32_4 = 32'b100;
parameter    ap_const_lv32_5 = 32'b101;
parameter    ap_const_lv10_1 = 10'b1;
parameter    ap_const_lv32_1 = 32'b1;
parameter    ap_const_lv3_0 = 3'b000;
parameter    ap_const_lv2_0 = 2'b00;
parameter    ap_const_lv4_0 = 4'b0000;
parameter    ap_const_lv10_3FF = 10'b1111111111;
parameter    ap_const_lv13_0 = 13'b0000000000000;
parameter    ap_const_lv11_0 = 11'b00000000000;
parameter    ap_const_lv32_8 = 32'b1000;
parameter    ap_const_lv32_1F = 32'b11111;
parameter    ap_const_lv24_0 = 24'b000000000000000000000000;
parameter    ap_const_lv8_FF = 8'b11111111;
parameter    ap_const_lv8_0 = 8'b00000000;
parameter    ap_const_lv24_1 = 24'b1;

parameter C_S_AXI_AXILITES_WSTRB_WIDTH = (C_S_AXI_AXILITES_DATA_WIDTH / ap_const_int64_8);
parameter C_S_AXI_WSTRB_WIDTH = (C_S_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_XSOBEL_INPUT_BUS_WSTRB_WIDTH = (C_M_AXI_XSOBEL_INPUT_BUS_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_WSTRB_WIDTH = (C_M_AXI_DATA_WIDTH / ap_const_int64_8);
parameter C_M_AXI_XSOBEL_OUTPUT_BUS_WSTRB_WIDTH = (C_M_AXI_XSOBEL_OUTPUT_BUS_DATA_WIDTH / ap_const_int64_8);

input   ap_clk;
input   ap_rst_n;
output   m_axi_XSOBEL_INPUT_BUS_AWVALID;
input   m_axi_XSOBEL_INPUT_BUS_AWREADY;
output  [C_M_AXI_XSOBEL_INPUT_BUS_ADDR_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_AWADDR;
output  [C_M_AXI_XSOBEL_INPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_AWID;
output  [7:0] m_axi_XSOBEL_INPUT_BUS_AWLEN;
output  [2:0] m_axi_XSOBEL_INPUT_BUS_AWSIZE;
output  [1:0] m_axi_XSOBEL_INPUT_BUS_AWBURST;
output  [1:0] m_axi_XSOBEL_INPUT_BUS_AWLOCK;
output  [3:0] m_axi_XSOBEL_INPUT_BUS_AWCACHE;
output  [2:0] m_axi_XSOBEL_INPUT_BUS_AWPROT;
output  [3:0] m_axi_XSOBEL_INPUT_BUS_AWQOS;
output  [3:0] m_axi_XSOBEL_INPUT_BUS_AWREGION;
output  [C_M_AXI_XSOBEL_INPUT_BUS_AWUSER_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_AWUSER;
output   m_axi_XSOBEL_INPUT_BUS_WVALID;
input   m_axi_XSOBEL_INPUT_BUS_WREADY;
output  [C_M_AXI_XSOBEL_INPUT_BUS_DATA_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_WDATA;
output  [C_M_AXI_XSOBEL_INPUT_BUS_WSTRB_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_WSTRB;
output   m_axi_XSOBEL_INPUT_BUS_WLAST;
output  [C_M_AXI_XSOBEL_INPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_WID;
output  [C_M_AXI_XSOBEL_INPUT_BUS_WUSER_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_WUSER;
output   m_axi_XSOBEL_INPUT_BUS_ARVALID;
input   m_axi_XSOBEL_INPUT_BUS_ARREADY;
output  [C_M_AXI_XSOBEL_INPUT_BUS_ADDR_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_ARADDR;
output  [C_M_AXI_XSOBEL_INPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_ARID;
output  [7:0] m_axi_XSOBEL_INPUT_BUS_ARLEN;
output  [2:0] m_axi_XSOBEL_INPUT_BUS_ARSIZE;
output  [1:0] m_axi_XSOBEL_INPUT_BUS_ARBURST;
output  [1:0] m_axi_XSOBEL_INPUT_BUS_ARLOCK;
output  [3:0] m_axi_XSOBEL_INPUT_BUS_ARCACHE;
output  [2:0] m_axi_XSOBEL_INPUT_BUS_ARPROT;
output  [3:0] m_axi_XSOBEL_INPUT_BUS_ARQOS;
output  [3:0] m_axi_XSOBEL_INPUT_BUS_ARREGION;
output  [C_M_AXI_XSOBEL_INPUT_BUS_ARUSER_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_ARUSER;
input   m_axi_XSOBEL_INPUT_BUS_RVALID;
output   m_axi_XSOBEL_INPUT_BUS_RREADY;
input  [C_M_AXI_XSOBEL_INPUT_BUS_DATA_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_RDATA;
input   m_axi_XSOBEL_INPUT_BUS_RLAST;
input  [C_M_AXI_XSOBEL_INPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_RID;
input  [C_M_AXI_XSOBEL_INPUT_BUS_RUSER_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_RUSER;
input  [1:0] m_axi_XSOBEL_INPUT_BUS_RRESP;
input   m_axi_XSOBEL_INPUT_BUS_BVALID;
output   m_axi_XSOBEL_INPUT_BUS_BREADY;
input  [1:0] m_axi_XSOBEL_INPUT_BUS_BRESP;
input  [C_M_AXI_XSOBEL_INPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_BID;
input  [C_M_AXI_XSOBEL_INPUT_BUS_BUSER_WIDTH - 1 : 0] m_axi_XSOBEL_INPUT_BUS_BUSER;
output   m_axi_XSOBEL_OUTPUT_BUS_AWVALID;
input   m_axi_XSOBEL_OUTPUT_BUS_AWREADY;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_ADDR_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_AWADDR;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_AWID;
output  [7:0] m_axi_XSOBEL_OUTPUT_BUS_AWLEN;
output  [2:0] m_axi_XSOBEL_OUTPUT_BUS_AWSIZE;
output  [1:0] m_axi_XSOBEL_OUTPUT_BUS_AWBURST;
output  [1:0] m_axi_XSOBEL_OUTPUT_BUS_AWLOCK;
output  [3:0] m_axi_XSOBEL_OUTPUT_BUS_AWCACHE;
output  [2:0] m_axi_XSOBEL_OUTPUT_BUS_AWPROT;
output  [3:0] m_axi_XSOBEL_OUTPUT_BUS_AWQOS;
output  [3:0] m_axi_XSOBEL_OUTPUT_BUS_AWREGION;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_AWUSER_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_AWUSER;
output   m_axi_XSOBEL_OUTPUT_BUS_WVALID;
input   m_axi_XSOBEL_OUTPUT_BUS_WREADY;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_DATA_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_WDATA;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_WSTRB_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_WSTRB;
output   m_axi_XSOBEL_OUTPUT_BUS_WLAST;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_WID;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_WUSER_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_WUSER;
output   m_axi_XSOBEL_OUTPUT_BUS_ARVALID;
input   m_axi_XSOBEL_OUTPUT_BUS_ARREADY;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_ADDR_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_ARADDR;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_ARID;
output  [7:0] m_axi_XSOBEL_OUTPUT_BUS_ARLEN;
output  [2:0] m_axi_XSOBEL_OUTPUT_BUS_ARSIZE;
output  [1:0] m_axi_XSOBEL_OUTPUT_BUS_ARBURST;
output  [1:0] m_axi_XSOBEL_OUTPUT_BUS_ARLOCK;
output  [3:0] m_axi_XSOBEL_OUTPUT_BUS_ARCACHE;
output  [2:0] m_axi_XSOBEL_OUTPUT_BUS_ARPROT;
output  [3:0] m_axi_XSOBEL_OUTPUT_BUS_ARQOS;
output  [3:0] m_axi_XSOBEL_OUTPUT_BUS_ARREGION;
output  [C_M_AXI_XSOBEL_OUTPUT_BUS_ARUSER_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_ARUSER;
input   m_axi_XSOBEL_OUTPUT_BUS_RVALID;
output   m_axi_XSOBEL_OUTPUT_BUS_RREADY;
input  [C_M_AXI_XSOBEL_OUTPUT_BUS_DATA_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_RDATA;
input   m_axi_XSOBEL_OUTPUT_BUS_RLAST;
input  [C_M_AXI_XSOBEL_OUTPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_RID;
input  [C_M_AXI_XSOBEL_OUTPUT_BUS_RUSER_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_RUSER;
input  [1:0] m_axi_XSOBEL_OUTPUT_BUS_RRESP;
input   m_axi_XSOBEL_OUTPUT_BUS_BVALID;
output   m_axi_XSOBEL_OUTPUT_BUS_BREADY;
input  [1:0] m_axi_XSOBEL_OUTPUT_BUS_BRESP;
input  [C_M_AXI_XSOBEL_OUTPUT_BUS_ID_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_BID;
input  [C_M_AXI_XSOBEL_OUTPUT_BUS_BUSER_WIDTH - 1 : 0] m_axi_XSOBEL_OUTPUT_BUS_BUSER;
input   s_axi_AXILiteS_AWVALID;
output   s_axi_AXILiteS_AWREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_AWADDR;
input   s_axi_AXILiteS_WVALID;
output   s_axi_AXILiteS_WREADY;
input  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_WDATA;
input  [C_S_AXI_AXILITES_WSTRB_WIDTH - 1 : 0] s_axi_AXILiteS_WSTRB;
input   s_axi_AXILiteS_ARVALID;
output   s_axi_AXILiteS_ARREADY;
input  [C_S_AXI_AXILITES_ADDR_WIDTH - 1 : 0] s_axi_AXILiteS_ARADDR;
output   s_axi_AXILiteS_RVALID;
input   s_axi_AXILiteS_RREADY;
output  [C_S_AXI_AXILITES_DATA_WIDTH - 1 : 0] s_axi_AXILiteS_RDATA;
output  [1:0] s_axi_AXILiteS_RRESP;
output   s_axi_AXILiteS_BVALID;
input   s_axi_AXILiteS_BREADY;
output  [1:0] s_axi_AXILiteS_BRESP;
output   interrupt;

reg    ap_rst_n_inv;
wire    ap_start;
reg    ap_done;
reg    ap_idle;
(* fsm_encoding = "none" *) reg   [12:0] ap_CS_fsm;
wire   [0:0] ap_CS_fsm_state1;
reg    ap_ready;
wire   [31:0] input_r;
wire   [31:0] output_r;
reg    XSOBEL_OUTPUT_BUS_blk_n_AW;
wire   [0:0] ap_CS_fsm_state7;
reg    XSOBEL_OUTPUT_BUS_blk_n_W;
wire   [0:0] ap_CS_fsm_state8;
reg    XSOBEL_OUTPUT_BUS_blk_n_B;
wire   [0:0] ap_CS_fsm_state13;
wire    XSOBEL_INPUT_BUS_AWREADY;
wire    XSOBEL_INPUT_BUS_WREADY;
reg    XSOBEL_INPUT_BUS_ARVALID;
wire    XSOBEL_INPUT_BUS_ARREADY;
reg   [31:0] XSOBEL_INPUT_BUS_ARADDR;
reg   [0:0] XSOBEL_INPUT_BUS_ARID;
reg   [31:0] XSOBEL_INPUT_BUS_ARLEN;
reg   [2:0] XSOBEL_INPUT_BUS_ARSIZE;
reg   [1:0] XSOBEL_INPUT_BUS_ARBURST;
reg   [1:0] XSOBEL_INPUT_BUS_ARLOCK;
reg   [3:0] XSOBEL_INPUT_BUS_ARCACHE;
reg   [2:0] XSOBEL_INPUT_BUS_ARPROT;
reg   [3:0] XSOBEL_INPUT_BUS_ARQOS;
reg   [3:0] XSOBEL_INPUT_BUS_ARREGION;
reg   [0:0] XSOBEL_INPUT_BUS_ARUSER;
wire    XSOBEL_INPUT_BUS_RVALID;
reg    XSOBEL_INPUT_BUS_RREADY;
wire   [7:0] XSOBEL_INPUT_BUS_RDATA;
wire    XSOBEL_INPUT_BUS_RLAST;
wire   [0:0] XSOBEL_INPUT_BUS_RID;
wire   [0:0] XSOBEL_INPUT_BUS_RUSER;
wire   [1:0] XSOBEL_INPUT_BUS_RRESP;
wire    XSOBEL_INPUT_BUS_BVALID;
wire   [1:0] XSOBEL_INPUT_BUS_BRESP;
wire   [0:0] XSOBEL_INPUT_BUS_BID;
wire   [0:0] XSOBEL_INPUT_BUS_BUSER;
reg    XSOBEL_OUTPUT_BUS_AWVALID;
wire    XSOBEL_OUTPUT_BUS_AWREADY;
reg    XSOBEL_OUTPUT_BUS_WVALID;
wire    XSOBEL_OUTPUT_BUS_WREADY;
wire    XSOBEL_OUTPUT_BUS_ARREADY;
wire    XSOBEL_OUTPUT_BUS_RVALID;
wire   [7:0] XSOBEL_OUTPUT_BUS_RDATA;
wire    XSOBEL_OUTPUT_BUS_RLAST;
wire   [0:0] XSOBEL_OUTPUT_BUS_RID;
wire   [0:0] XSOBEL_OUTPUT_BUS_RUSER;
wire   [1:0] XSOBEL_OUTPUT_BUS_RRESP;
wire    XSOBEL_OUTPUT_BUS_BVALID;
reg    XSOBEL_OUTPUT_BUS_BREADY;
wire   [1:0] XSOBEL_OUTPUT_BUS_BRESP;
wire   [0:0] XSOBEL_OUTPUT_BUS_BID;
wire   [0:0] XSOBEL_OUTPUT_BUS_BUSER;
reg   [31:0] input_read_reg_346;
wire  signed [32:0] tmp_cast_fu_155_p1;
reg  signed [32:0] tmp_cast_reg_352;
reg   [31:0] XSOBEL_OUTPUT_BUS_ad_reg_363;
wire   [0:0] ap_CS_fsm_state3;
wire   [0:0] exitcond_fu_165_p2;
wire   [9:0] i_1_fu_198_p2;
wire   [10:0] grp_convolution2D_horiz_fu_144_ap_return;
reg   [10:0] tmp_2_reg_373;
wire   [0:0] ap_CS_fsm_state4;
wire    grp_convolution2D_horiz_fu_144_ap_done;
wire   [9:0] j_1_fu_204_p2;
reg   [9:0] j_1_reg_380;
wire   [0:0] ap_CS_fsm_state5;
wire   [12:0] neg_fu_213_p2;
reg   [12:0] neg_reg_385;
wire   [0:0] ap_CS_fsm_state6;
wire    grp_convolution2D_vert_fu_133_ap_done;
wire   [0:0] abscond_fu_219_p2;
reg   [0:0] abscond_reg_390;
wire   [10:0] grp_convolution2D_vert_fu_133_ap_return;
reg   [10:0] tmp_3_reg_395;
wire   [12:0] neg2_fu_228_p2;
reg   [12:0] neg2_reg_400;
wire   [0:0] abscond3_fu_234_p2;
reg   [0:0] abscond3_reg_405;
wire   [7:0] tmp_s_fu_340_p2;
reg   [7:0] tmp_s_reg_410;
reg    ap_sig_ioackin_XSOBEL_OUTPUT_BUS_AWREADY;
wire    grp_convolution2D_vert_fu_133_ap_start;
wire    grp_convolution2D_vert_fu_133_ap_idle;
wire    grp_convolution2D_vert_fu_133_ap_ready;
wire    grp_convolution2D_vert_fu_133_m_axi_input_r_AWVALID;
wire   [31:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWADDR;
wire   [0:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWID;
wire   [31:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWLEN;
wire   [2:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWSIZE;
wire   [1:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWBURST;
wire   [1:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWLOCK;
wire   [3:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWCACHE;
wire   [2:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWPROT;
wire   [3:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWQOS;
wire   [3:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWREGION;
wire   [0:0] grp_convolution2D_vert_fu_133_m_axi_input_r_AWUSER;
wire    grp_convolution2D_vert_fu_133_m_axi_input_r_WVALID;
wire   [7:0] grp_convolution2D_vert_fu_133_m_axi_input_r_WDATA;
wire   [0:0] grp_convolution2D_vert_fu_133_m_axi_input_r_WSTRB;
wire    grp_convolution2D_vert_fu_133_m_axi_input_r_WLAST;
wire   [0:0] grp_convolution2D_vert_fu_133_m_axi_input_r_WID;
wire   [0:0] grp_convolution2D_vert_fu_133_m_axi_input_r_WUSER;
wire    grp_convolution2D_vert_fu_133_m_axi_input_r_ARVALID;
wire   [31:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARADDR;
wire   [0:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARID;
wire   [31:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARLEN;
wire   [2:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARSIZE;
wire   [1:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARBURST;
wire   [1:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARLOCK;
wire   [3:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARCACHE;
wire   [2:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARPROT;
wire   [3:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARQOS;
wire   [3:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARREGION;
wire   [0:0] grp_convolution2D_vert_fu_133_m_axi_input_r_ARUSER;
wire    grp_convolution2D_vert_fu_133_m_axi_input_r_RREADY;
wire    grp_convolution2D_vert_fu_133_m_axi_input_r_BREADY;
wire    grp_convolution2D_horiz_fu_144_ap_start;
wire    grp_convolution2D_horiz_fu_144_ap_idle;
wire    grp_convolution2D_horiz_fu_144_ap_ready;
wire    grp_convolution2D_horiz_fu_144_m_axi_input_r_AWVALID;
wire   [31:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWADDR;
wire   [0:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWID;
wire   [31:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWLEN;
wire   [2:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWSIZE;
wire   [1:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWBURST;
wire   [1:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWLOCK;
wire   [3:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWCACHE;
wire   [2:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWPROT;
wire   [3:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWQOS;
wire   [3:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWREGION;
wire   [0:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_AWUSER;
wire    grp_convolution2D_horiz_fu_144_m_axi_input_r_WVALID;
wire   [7:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_WDATA;
wire   [0:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_WSTRB;
wire    grp_convolution2D_horiz_fu_144_m_axi_input_r_WLAST;
wire   [0:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_WID;
wire   [0:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_WUSER;
wire    grp_convolution2D_horiz_fu_144_m_axi_input_r_ARVALID;
wire   [31:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARADDR;
wire   [0:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARID;
wire   [31:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARLEN;
wire   [2:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARSIZE;
wire   [1:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARBURST;
wire   [1:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARLOCK;
wire   [3:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARCACHE;
wire   [2:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARPROT;
wire   [3:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARQOS;
wire   [3:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARREGION;
wire   [0:0] grp_convolution2D_horiz_fu_144_m_axi_input_r_ARUSER;
wire    grp_convolution2D_horiz_fu_144_m_axi_input_r_RREADY;
wire    grp_convolution2D_horiz_fu_144_m_axi_input_r_BREADY;
reg   [9:0] i_reg_109;
reg   [9:0] j_reg_121;
wire   [0:0] ap_CS_fsm_state2;
wire   [0:0] exitcond1_fu_159_p2;
reg    ap_reg_grp_convolution2D_vert_fu_133_ap_start;
reg    ap_reg_grp_convolution2D_horiz_fu_144_ap_start;
wire  signed [63:0] output4_sum_cast_fu_188_p1;
reg    ap_reg_ioackin_XSOBEL_OUTPUT_BUS_AWREADY;
reg    ap_reg_ioackin_XSOBEL_OUTPUT_BUS_WREADY;
reg    ap_sig_ioackin_XSOBEL_OUTPUT_BUS_WREADY;
wire   [19:0] tmp_1_fu_171_p3;
wire   [32:0] tmp_10_cast_fu_179_p1;
wire   [32:0] output4_sum_fu_183_p2;
wire  signed [12:0] neg_trunc_ext_cast_fu_210_p1;
wire  signed [12:0] neg2_trunc_ext_cast_fu_224_p1;
wire  signed [31:0] tmp_2_ext_fu_240_p1;
wire  signed [31:0] neg_cast_fu_243_p1;
wire  signed [31:0] tmp_3_ext_fu_253_p1;
wire  signed [31:0] neg2_cast_fu_256_p1;
wire   [31:0] abs4_fu_259_p3;
wire   [31:0] abs_fu_246_p3;
wire   [31:0] res_fu_274_p2;
wire   [23:0] tmp_6_fu_280_p4;
wire   [0:0] icmp_fu_290_p2;
wire   [23:0] tmp_10_fu_304_p4;
wire   [7:0] tmp_4_fu_270_p1;
wire   [7:0] tmp_fu_266_p1;
wire   [0:0] icmp9_fu_314_p2;
wire   [7:0] tmp_7_fu_320_p2;
wire   [7:0] tmp_8_fu_326_p3;
wire   [7:0] tmp_9_fu_334_p2;
wire   [7:0] tmp_5_fu_296_p3;
reg   [12:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 13'b1;
#0 ap_reg_grp_convolution2D_vert_fu_133_ap_start = 1'b0;
#0 ap_reg_grp_convolution2D_horiz_fu_144_ap_start = 1'b0;
#0 ap_reg_ioackin_XSOBEL_OUTPUT_BUS_AWREADY = 1'b0;
#0 ap_reg_ioackin_XSOBEL_OUTPUT_BUS_WREADY = 1'b0;
end

sobel_AXILiteS_s_axi #(
    .C_S_AXI_ADDR_WIDTH( C_S_AXI_AXILITES_ADDR_WIDTH ),
    .C_S_AXI_DATA_WIDTH( C_S_AXI_AXILITES_DATA_WIDTH ))
sobel_AXILiteS_s_axi_U(
    .AWVALID(s_axi_AXILiteS_AWVALID),
    .AWREADY(s_axi_AXILiteS_AWREADY),
    .AWADDR(s_axi_AXILiteS_AWADDR),
    .WVALID(s_axi_AXILiteS_WVALID),
    .WREADY(s_axi_AXILiteS_WREADY),
    .WDATA(s_axi_AXILiteS_WDATA),
    .WSTRB(s_axi_AXILiteS_WSTRB),
    .ARVALID(s_axi_AXILiteS_ARVALID),
    .ARREADY(s_axi_AXILiteS_ARREADY),
    .ARADDR(s_axi_AXILiteS_ARADDR),
    .RVALID(s_axi_AXILiteS_RVALID),
    .RREADY(s_axi_AXILiteS_RREADY),
    .RDATA(s_axi_AXILiteS_RDATA),
    .RRESP(s_axi_AXILiteS_RRESP),
    .BVALID(s_axi_AXILiteS_BVALID),
    .BREADY(s_axi_AXILiteS_BREADY),
    .BRESP(s_axi_AXILiteS_BRESP),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .ap_start(ap_start),
    .interrupt(interrupt),
    .ap_ready(ap_ready),
    .ap_done(ap_done),
    .ap_idle(ap_idle),
    .input_r(input_r),
    .output_r(output_r)
);

sobel_XSOBEL_INPUT_BUS_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_XSOBEL_INPUT_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_XSOBEL_INPUT_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_XSOBEL_INPUT_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_XSOBEL_INPUT_BUS_CACHE_VALUE ))
sobel_XSOBEL_INPUT_BUS_m_axi_U(
    .AWVALID(m_axi_XSOBEL_INPUT_BUS_AWVALID),
    .AWREADY(m_axi_XSOBEL_INPUT_BUS_AWREADY),
    .AWADDR(m_axi_XSOBEL_INPUT_BUS_AWADDR),
    .AWID(m_axi_XSOBEL_INPUT_BUS_AWID),
    .AWLEN(m_axi_XSOBEL_INPUT_BUS_AWLEN),
    .AWSIZE(m_axi_XSOBEL_INPUT_BUS_AWSIZE),
    .AWBURST(m_axi_XSOBEL_INPUT_BUS_AWBURST),
    .AWLOCK(m_axi_XSOBEL_INPUT_BUS_AWLOCK),
    .AWCACHE(m_axi_XSOBEL_INPUT_BUS_AWCACHE),
    .AWPROT(m_axi_XSOBEL_INPUT_BUS_AWPROT),
    .AWQOS(m_axi_XSOBEL_INPUT_BUS_AWQOS),
    .AWREGION(m_axi_XSOBEL_INPUT_BUS_AWREGION),
    .AWUSER(m_axi_XSOBEL_INPUT_BUS_AWUSER),
    .WVALID(m_axi_XSOBEL_INPUT_BUS_WVALID),
    .WREADY(m_axi_XSOBEL_INPUT_BUS_WREADY),
    .WDATA(m_axi_XSOBEL_INPUT_BUS_WDATA),
    .WSTRB(m_axi_XSOBEL_INPUT_BUS_WSTRB),
    .WLAST(m_axi_XSOBEL_INPUT_BUS_WLAST),
    .WID(m_axi_XSOBEL_INPUT_BUS_WID),
    .WUSER(m_axi_XSOBEL_INPUT_BUS_WUSER),
    .ARVALID(m_axi_XSOBEL_INPUT_BUS_ARVALID),
    .ARREADY(m_axi_XSOBEL_INPUT_BUS_ARREADY),
    .ARADDR(m_axi_XSOBEL_INPUT_BUS_ARADDR),
    .ARID(m_axi_XSOBEL_INPUT_BUS_ARID),
    .ARLEN(m_axi_XSOBEL_INPUT_BUS_ARLEN),
    .ARSIZE(m_axi_XSOBEL_INPUT_BUS_ARSIZE),
    .ARBURST(m_axi_XSOBEL_INPUT_BUS_ARBURST),
    .ARLOCK(m_axi_XSOBEL_INPUT_BUS_ARLOCK),
    .ARCACHE(m_axi_XSOBEL_INPUT_BUS_ARCACHE),
    .ARPROT(m_axi_XSOBEL_INPUT_BUS_ARPROT),
    .ARQOS(m_axi_XSOBEL_INPUT_BUS_ARQOS),
    .ARREGION(m_axi_XSOBEL_INPUT_BUS_ARREGION),
    .ARUSER(m_axi_XSOBEL_INPUT_BUS_ARUSER),
    .RVALID(m_axi_XSOBEL_INPUT_BUS_RVALID),
    .RREADY(m_axi_XSOBEL_INPUT_BUS_RREADY),
    .RDATA(m_axi_XSOBEL_INPUT_BUS_RDATA),
    .RLAST(m_axi_XSOBEL_INPUT_BUS_RLAST),
    .RID(m_axi_XSOBEL_INPUT_BUS_RID),
    .RUSER(m_axi_XSOBEL_INPUT_BUS_RUSER),
    .RRESP(m_axi_XSOBEL_INPUT_BUS_RRESP),
    .BVALID(m_axi_XSOBEL_INPUT_BUS_BVALID),
    .BREADY(m_axi_XSOBEL_INPUT_BUS_BREADY),
    .BRESP(m_axi_XSOBEL_INPUT_BUS_BRESP),
    .BID(m_axi_XSOBEL_INPUT_BUS_BID),
    .BUSER(m_axi_XSOBEL_INPUT_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(XSOBEL_INPUT_BUS_ARVALID),
    .I_ARREADY(XSOBEL_INPUT_BUS_ARREADY),
    .I_ARADDR(XSOBEL_INPUT_BUS_ARADDR),
    .I_ARID(XSOBEL_INPUT_BUS_ARID),
    .I_ARLEN(XSOBEL_INPUT_BUS_ARLEN),
    .I_ARSIZE(XSOBEL_INPUT_BUS_ARSIZE),
    .I_ARLOCK(XSOBEL_INPUT_BUS_ARLOCK),
    .I_ARCACHE(XSOBEL_INPUT_BUS_ARCACHE),
    .I_ARQOS(XSOBEL_INPUT_BUS_ARQOS),
    .I_ARPROT(XSOBEL_INPUT_BUS_ARPROT),
    .I_ARUSER(XSOBEL_INPUT_BUS_ARUSER),
    .I_ARBURST(XSOBEL_INPUT_BUS_ARBURST),
    .I_ARREGION(XSOBEL_INPUT_BUS_ARREGION),
    .I_RVALID(XSOBEL_INPUT_BUS_RVALID),
    .I_RREADY(XSOBEL_INPUT_BUS_RREADY),
    .I_RDATA(XSOBEL_INPUT_BUS_RDATA),
    .I_RID(XSOBEL_INPUT_BUS_RID),
    .I_RUSER(XSOBEL_INPUT_BUS_RUSER),
    .I_RRESP(XSOBEL_INPUT_BUS_RRESP),
    .I_RLAST(XSOBEL_INPUT_BUS_RLAST),
    .I_AWVALID(1'b0),
    .I_AWREADY(XSOBEL_INPUT_BUS_AWREADY),
    .I_AWADDR(ap_const_lv32_0),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_0),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(1'b0),
    .I_WREADY(XSOBEL_INPUT_BUS_WREADY),
    .I_WDATA(ap_const_lv8_0),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'b0),
    .I_BVALID(XSOBEL_INPUT_BUS_BVALID),
    .I_BREADY(1'b0),
    .I_BRESP(XSOBEL_INPUT_BUS_BRESP),
    .I_BID(XSOBEL_INPUT_BUS_BID),
    .I_BUSER(XSOBEL_INPUT_BUS_BUSER)
);

sobel_XSOBEL_OUTPUT_BUS_m_axi #(
    .USER_DW( 8 ),
    .USER_AW( 32 ),
    .USER_MAXREQS( 5 ),
    .NUM_READ_OUTSTANDING( 16 ),
    .NUM_WRITE_OUTSTANDING( 16 ),
    .MAX_READ_BURST_LENGTH( 16 ),
    .MAX_WRITE_BURST_LENGTH( 16 ),
    .C_M_AXI_ID_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_ID_WIDTH ),
    .C_M_AXI_ADDR_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_ADDR_WIDTH ),
    .C_M_AXI_DATA_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_DATA_WIDTH ),
    .C_M_AXI_AWUSER_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_AWUSER_WIDTH ),
    .C_M_AXI_ARUSER_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_ARUSER_WIDTH ),
    .C_M_AXI_WUSER_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_WUSER_WIDTH ),
    .C_M_AXI_RUSER_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_RUSER_WIDTH ),
    .C_M_AXI_BUSER_WIDTH( C_M_AXI_XSOBEL_OUTPUT_BUS_BUSER_WIDTH ),
    .C_USER_VALUE( C_M_AXI_XSOBEL_OUTPUT_BUS_USER_VALUE ),
    .C_PROT_VALUE( C_M_AXI_XSOBEL_OUTPUT_BUS_PROT_VALUE ),
    .C_CACHE_VALUE( C_M_AXI_XSOBEL_OUTPUT_BUS_CACHE_VALUE ))
sobel_XSOBEL_OUTPUT_BUS_m_axi_U(
    .AWVALID(m_axi_XSOBEL_OUTPUT_BUS_AWVALID),
    .AWREADY(m_axi_XSOBEL_OUTPUT_BUS_AWREADY),
    .AWADDR(m_axi_XSOBEL_OUTPUT_BUS_AWADDR),
    .AWID(m_axi_XSOBEL_OUTPUT_BUS_AWID),
    .AWLEN(m_axi_XSOBEL_OUTPUT_BUS_AWLEN),
    .AWSIZE(m_axi_XSOBEL_OUTPUT_BUS_AWSIZE),
    .AWBURST(m_axi_XSOBEL_OUTPUT_BUS_AWBURST),
    .AWLOCK(m_axi_XSOBEL_OUTPUT_BUS_AWLOCK),
    .AWCACHE(m_axi_XSOBEL_OUTPUT_BUS_AWCACHE),
    .AWPROT(m_axi_XSOBEL_OUTPUT_BUS_AWPROT),
    .AWQOS(m_axi_XSOBEL_OUTPUT_BUS_AWQOS),
    .AWREGION(m_axi_XSOBEL_OUTPUT_BUS_AWREGION),
    .AWUSER(m_axi_XSOBEL_OUTPUT_BUS_AWUSER),
    .WVALID(m_axi_XSOBEL_OUTPUT_BUS_WVALID),
    .WREADY(m_axi_XSOBEL_OUTPUT_BUS_WREADY),
    .WDATA(m_axi_XSOBEL_OUTPUT_BUS_WDATA),
    .WSTRB(m_axi_XSOBEL_OUTPUT_BUS_WSTRB),
    .WLAST(m_axi_XSOBEL_OUTPUT_BUS_WLAST),
    .WID(m_axi_XSOBEL_OUTPUT_BUS_WID),
    .WUSER(m_axi_XSOBEL_OUTPUT_BUS_WUSER),
    .ARVALID(m_axi_XSOBEL_OUTPUT_BUS_ARVALID),
    .ARREADY(m_axi_XSOBEL_OUTPUT_BUS_ARREADY),
    .ARADDR(m_axi_XSOBEL_OUTPUT_BUS_ARADDR),
    .ARID(m_axi_XSOBEL_OUTPUT_BUS_ARID),
    .ARLEN(m_axi_XSOBEL_OUTPUT_BUS_ARLEN),
    .ARSIZE(m_axi_XSOBEL_OUTPUT_BUS_ARSIZE),
    .ARBURST(m_axi_XSOBEL_OUTPUT_BUS_ARBURST),
    .ARLOCK(m_axi_XSOBEL_OUTPUT_BUS_ARLOCK),
    .ARCACHE(m_axi_XSOBEL_OUTPUT_BUS_ARCACHE),
    .ARPROT(m_axi_XSOBEL_OUTPUT_BUS_ARPROT),
    .ARQOS(m_axi_XSOBEL_OUTPUT_BUS_ARQOS),
    .ARREGION(m_axi_XSOBEL_OUTPUT_BUS_ARREGION),
    .ARUSER(m_axi_XSOBEL_OUTPUT_BUS_ARUSER),
    .RVALID(m_axi_XSOBEL_OUTPUT_BUS_RVALID),
    .RREADY(m_axi_XSOBEL_OUTPUT_BUS_RREADY),
    .RDATA(m_axi_XSOBEL_OUTPUT_BUS_RDATA),
    .RLAST(m_axi_XSOBEL_OUTPUT_BUS_RLAST),
    .RID(m_axi_XSOBEL_OUTPUT_BUS_RID),
    .RUSER(m_axi_XSOBEL_OUTPUT_BUS_RUSER),
    .RRESP(m_axi_XSOBEL_OUTPUT_BUS_RRESP),
    .BVALID(m_axi_XSOBEL_OUTPUT_BUS_BVALID),
    .BREADY(m_axi_XSOBEL_OUTPUT_BUS_BREADY),
    .BRESP(m_axi_XSOBEL_OUTPUT_BUS_BRESP),
    .BID(m_axi_XSOBEL_OUTPUT_BUS_BID),
    .BUSER(m_axi_XSOBEL_OUTPUT_BUS_BUSER),
    .ACLK(ap_clk),
    .ARESET(ap_rst_n_inv),
    .ACLK_EN(1'b1),
    .I_ARVALID(1'b0),
    .I_ARREADY(XSOBEL_OUTPUT_BUS_ARREADY),
    .I_ARADDR(ap_const_lv32_0),
    .I_ARID(1'b0),
    .I_ARLEN(ap_const_lv32_0),
    .I_ARSIZE(ap_const_lv3_0),
    .I_ARLOCK(ap_const_lv2_0),
    .I_ARCACHE(ap_const_lv4_0),
    .I_ARQOS(ap_const_lv4_0),
    .I_ARPROT(ap_const_lv3_0),
    .I_ARUSER(1'b0),
    .I_ARBURST(ap_const_lv2_0),
    .I_ARREGION(ap_const_lv4_0),
    .I_RVALID(XSOBEL_OUTPUT_BUS_RVALID),
    .I_RREADY(1'b0),
    .I_RDATA(XSOBEL_OUTPUT_BUS_RDATA),
    .I_RID(XSOBEL_OUTPUT_BUS_RID),
    .I_RUSER(XSOBEL_OUTPUT_BUS_RUSER),
    .I_RRESP(XSOBEL_OUTPUT_BUS_RRESP),
    .I_RLAST(XSOBEL_OUTPUT_BUS_RLAST),
    .I_AWVALID(XSOBEL_OUTPUT_BUS_AWVALID),
    .I_AWREADY(XSOBEL_OUTPUT_BUS_AWREADY),
    .I_AWADDR(XSOBEL_OUTPUT_BUS_ad_reg_363),
    .I_AWID(1'b0),
    .I_AWLEN(ap_const_lv32_1),
    .I_AWSIZE(ap_const_lv3_0),
    .I_AWLOCK(ap_const_lv2_0),
    .I_AWCACHE(ap_const_lv4_0),
    .I_AWQOS(ap_const_lv4_0),
    .I_AWPROT(ap_const_lv3_0),
    .I_AWUSER(1'b0),
    .I_AWBURST(ap_const_lv2_0),
    .I_AWREGION(ap_const_lv4_0),
    .I_WVALID(XSOBEL_OUTPUT_BUS_WVALID),
    .I_WREADY(XSOBEL_OUTPUT_BUS_WREADY),
    .I_WDATA(tmp_s_reg_410),
    .I_WID(1'b0),
    .I_WUSER(1'b0),
    .I_WLAST(1'b0),
    .I_WSTRB(1'b1),
    .I_BVALID(XSOBEL_OUTPUT_BUS_BVALID),
    .I_BREADY(XSOBEL_OUTPUT_BUS_BREADY),
    .I_BRESP(XSOBEL_OUTPUT_BUS_BRESP),
    .I_BID(XSOBEL_OUTPUT_BUS_BID),
    .I_BUSER(XSOBEL_OUTPUT_BUS_BUSER)
);

convolution2D_vert grp_convolution2D_vert_fu_133(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution2D_vert_fu_133_ap_start),
    .ap_done(grp_convolution2D_vert_fu_133_ap_done),
    .ap_idle(grp_convolution2D_vert_fu_133_ap_idle),
    .ap_ready(grp_convolution2D_vert_fu_133_ap_ready),
    .posy(i_reg_109),
    .posx(j_reg_121),
    .m_axi_input_r_AWVALID(grp_convolution2D_vert_fu_133_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(grp_convolution2D_vert_fu_133_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(grp_convolution2D_vert_fu_133_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(grp_convolution2D_vert_fu_133_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(grp_convolution2D_vert_fu_133_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(grp_convolution2D_vert_fu_133_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(grp_convolution2D_vert_fu_133_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(grp_convolution2D_vert_fu_133_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(grp_convolution2D_vert_fu_133_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(grp_convolution2D_vert_fu_133_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(grp_convolution2D_vert_fu_133_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(grp_convolution2D_vert_fu_133_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(grp_convolution2D_vert_fu_133_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(grp_convolution2D_vert_fu_133_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(grp_convolution2D_vert_fu_133_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(grp_convolution2D_vert_fu_133_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(grp_convolution2D_vert_fu_133_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(grp_convolution2D_vert_fu_133_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(grp_convolution2D_vert_fu_133_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(XSOBEL_INPUT_BUS_ARREADY),
    .m_axi_input_r_ARADDR(grp_convolution2D_vert_fu_133_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(grp_convolution2D_vert_fu_133_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(grp_convolution2D_vert_fu_133_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(grp_convolution2D_vert_fu_133_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(grp_convolution2D_vert_fu_133_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(grp_convolution2D_vert_fu_133_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(grp_convolution2D_vert_fu_133_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(grp_convolution2D_vert_fu_133_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(grp_convolution2D_vert_fu_133_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(grp_convolution2D_vert_fu_133_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(grp_convolution2D_vert_fu_133_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(XSOBEL_INPUT_BUS_RVALID),
    .m_axi_input_r_RREADY(grp_convolution2D_vert_fu_133_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(XSOBEL_INPUT_BUS_RDATA),
    .m_axi_input_r_RLAST(XSOBEL_INPUT_BUS_RLAST),
    .m_axi_input_r_RID(XSOBEL_INPUT_BUS_RID),
    .m_axi_input_r_RUSER(XSOBEL_INPUT_BUS_RUSER),
    .m_axi_input_r_RRESP(XSOBEL_INPUT_BUS_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(grp_convolution2D_vert_fu_133_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(ap_const_lv2_0),
    .m_axi_input_r_BID(1'b0),
    .m_axi_input_r_BUSER(1'b0),
    .input1(input_read_reg_346),
    .ap_return(grp_convolution2D_vert_fu_133_ap_return)
);

convolution2D_horiz grp_convolution2D_horiz_fu_144(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst_n_inv),
    .ap_start(grp_convolution2D_horiz_fu_144_ap_start),
    .ap_done(grp_convolution2D_horiz_fu_144_ap_done),
    .ap_idle(grp_convolution2D_horiz_fu_144_ap_idle),
    .ap_ready(grp_convolution2D_horiz_fu_144_ap_ready),
    .posy(i_reg_109),
    .posx(j_reg_121),
    .m_axi_input_r_AWVALID(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWVALID),
    .m_axi_input_r_AWREADY(1'b0),
    .m_axi_input_r_AWADDR(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWADDR),
    .m_axi_input_r_AWID(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWID),
    .m_axi_input_r_AWLEN(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWLEN),
    .m_axi_input_r_AWSIZE(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWSIZE),
    .m_axi_input_r_AWBURST(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWBURST),
    .m_axi_input_r_AWLOCK(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWLOCK),
    .m_axi_input_r_AWCACHE(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWCACHE),
    .m_axi_input_r_AWPROT(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWPROT),
    .m_axi_input_r_AWQOS(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWQOS),
    .m_axi_input_r_AWREGION(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWREGION),
    .m_axi_input_r_AWUSER(grp_convolution2D_horiz_fu_144_m_axi_input_r_AWUSER),
    .m_axi_input_r_WVALID(grp_convolution2D_horiz_fu_144_m_axi_input_r_WVALID),
    .m_axi_input_r_WREADY(1'b0),
    .m_axi_input_r_WDATA(grp_convolution2D_horiz_fu_144_m_axi_input_r_WDATA),
    .m_axi_input_r_WSTRB(grp_convolution2D_horiz_fu_144_m_axi_input_r_WSTRB),
    .m_axi_input_r_WLAST(grp_convolution2D_horiz_fu_144_m_axi_input_r_WLAST),
    .m_axi_input_r_WID(grp_convolution2D_horiz_fu_144_m_axi_input_r_WID),
    .m_axi_input_r_WUSER(grp_convolution2D_horiz_fu_144_m_axi_input_r_WUSER),
    .m_axi_input_r_ARVALID(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARVALID),
    .m_axi_input_r_ARREADY(XSOBEL_INPUT_BUS_ARREADY),
    .m_axi_input_r_ARADDR(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARADDR),
    .m_axi_input_r_ARID(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARID),
    .m_axi_input_r_ARLEN(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARLEN),
    .m_axi_input_r_ARSIZE(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARSIZE),
    .m_axi_input_r_ARBURST(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARBURST),
    .m_axi_input_r_ARLOCK(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARLOCK),
    .m_axi_input_r_ARCACHE(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARCACHE),
    .m_axi_input_r_ARPROT(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARPROT),
    .m_axi_input_r_ARQOS(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARQOS),
    .m_axi_input_r_ARREGION(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARREGION),
    .m_axi_input_r_ARUSER(grp_convolution2D_horiz_fu_144_m_axi_input_r_ARUSER),
    .m_axi_input_r_RVALID(XSOBEL_INPUT_BUS_RVALID),
    .m_axi_input_r_RREADY(grp_convolution2D_horiz_fu_144_m_axi_input_r_RREADY),
    .m_axi_input_r_RDATA(XSOBEL_INPUT_BUS_RDATA),
    .m_axi_input_r_RLAST(XSOBEL_INPUT_BUS_RLAST),
    .m_axi_input_r_RID(XSOBEL_INPUT_BUS_RID),
    .m_axi_input_r_RUSER(XSOBEL_INPUT_BUS_RUSER),
    .m_axi_input_r_RRESP(XSOBEL_INPUT_BUS_RRESP),
    .m_axi_input_r_BVALID(1'b0),
    .m_axi_input_r_BREADY(grp_convolution2D_horiz_fu_144_m_axi_input_r_BREADY),
    .m_axi_input_r_BRESP(ap_const_lv2_0),
    .m_axi_input_r_BID(1'b0),
    .m_axi_input_r_BUSER(1'b0),
    .input1(input_read_reg_346),
    .ap_return(grp_convolution2D_horiz_fu_144_ap_return)
);

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_convolution2D_horiz_fu_144_ap_start <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0))) begin
            ap_reg_grp_convolution2D_horiz_fu_144_ap_start <= 1'b1;
        end else if ((1'b1 == grp_convolution2D_horiz_fu_144_ap_ready)) begin
            ap_reg_grp_convolution2D_horiz_fu_144_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_grp_convolution2D_vert_fu_133_ap_start <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state5)) begin
            ap_reg_grp_convolution2D_vert_fu_133_ap_start <= 1'b1;
        end else if ((1'b1 == grp_convolution2D_vert_fu_133_ap_ready)) begin
            ap_reg_grp_convolution2D_vert_fu_133_ap_start <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_XSOBEL_OUTPUT_BUS_AWREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state7)) begin
            if (~(1'b0 == ap_sig_ioackin_XSOBEL_OUTPUT_BUS_AWREADY)) begin
                ap_reg_ioackin_XSOBEL_OUTPUT_BUS_AWREADY <= 1'b0;
            end else if ((1'b1 == XSOBEL_OUTPUT_BUS_AWREADY)) begin
                ap_reg_ioackin_XSOBEL_OUTPUT_BUS_AWREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_reg_ioackin_XSOBEL_OUTPUT_BUS_WREADY <= 1'b0;
    end else begin
        if ((1'b1 == ap_CS_fsm_state8)) begin
            if (~(1'b0 == ap_sig_ioackin_XSOBEL_OUTPUT_BUS_WREADY)) begin
                ap_reg_ioackin_XSOBEL_OUTPUT_BUS_WREADY <= 1'b0;
            end else if ((1'b1 == XSOBEL_OUTPUT_BUS_WREADY)) begin
                ap_reg_ioackin_XSOBEL_OUTPUT_BUS_WREADY <= 1'b1;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & ~(exitcond_fu_165_p2 == 1'b0))) begin
        i_reg_109 <= i_1_fu_198_p2;
    end else if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        i_reg_109 <= ap_const_lv10_1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state2) & (1'b0 == exitcond1_fu_159_p2))) begin
        j_reg_121 <= ap_const_lv10_1;
    end else if (((1'b1 == ap_CS_fsm_state13) & ~(XSOBEL_OUTPUT_BUS_BVALID == 1'b0))) begin
        j_reg_121 <= j_1_reg_380;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0))) begin
        XSOBEL_OUTPUT_BUS_ad_reg_363 <= output4_sum_cast_fu_188_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & ~(1'b0 == grp_convolution2D_vert_fu_133_ap_done))) begin
        abscond3_reg_405 <= abscond3_fu_234_p2;
        abscond_reg_390 <= abscond_fu_219_p2;
        neg2_reg_400 <= neg2_fu_228_p2;
        neg_reg_385 <= neg_fu_213_p2;
        tmp_3_reg_395 <= grp_convolution2D_vert_fu_133_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((ap_CS_fsm_state1 == 1'b1) & ~(ap_start == 1'b0))) begin
        input_read_reg_346 <= input_r;
        tmp_cast_reg_352 <= tmp_cast_fu_155_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        j_1_reg_380 <= j_1_fu_204_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & ~(1'b0 == grp_convolution2D_horiz_fu_144_ap_done))) begin
        tmp_2_reg_373 <= grp_convolution2D_horiz_fu_144_ap_return;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state7) & ~(1'b0 == ap_sig_ioackin_XSOBEL_OUTPUT_BUS_AWREADY))) begin
        tmp_s_reg_410 <= tmp_s_fu_340_p2;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARADDR = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARADDR;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARADDR = grp_convolution2D_vert_fu_133_m_axi_input_r_ARADDR;
    end else begin
        XSOBEL_INPUT_BUS_ARADDR = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARBURST = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARBURST;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARBURST = grp_convolution2D_vert_fu_133_m_axi_input_r_ARBURST;
    end else begin
        XSOBEL_INPUT_BUS_ARBURST = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARCACHE = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARCACHE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARCACHE = grp_convolution2D_vert_fu_133_m_axi_input_r_ARCACHE;
    end else begin
        XSOBEL_INPUT_BUS_ARCACHE = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARID = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARID = grp_convolution2D_vert_fu_133_m_axi_input_r_ARID;
    end else begin
        XSOBEL_INPUT_BUS_ARID = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARLEN = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARLEN;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARLEN = grp_convolution2D_vert_fu_133_m_axi_input_r_ARLEN;
    end else begin
        XSOBEL_INPUT_BUS_ARLEN = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARLOCK = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARLOCK;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARLOCK = grp_convolution2D_vert_fu_133_m_axi_input_r_ARLOCK;
    end else begin
        XSOBEL_INPUT_BUS_ARLOCK = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARPROT = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARPROT;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARPROT = grp_convolution2D_vert_fu_133_m_axi_input_r_ARPROT;
    end else begin
        XSOBEL_INPUT_BUS_ARPROT = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARQOS = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARQOS;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARQOS = grp_convolution2D_vert_fu_133_m_axi_input_r_ARQOS;
    end else begin
        XSOBEL_INPUT_BUS_ARQOS = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARREGION = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARREGION;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARREGION = grp_convolution2D_vert_fu_133_m_axi_input_r_ARREGION;
    end else begin
        XSOBEL_INPUT_BUS_ARREGION = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARSIZE = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARSIZE;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARSIZE = grp_convolution2D_vert_fu_133_m_axi_input_r_ARSIZE;
    end else begin
        XSOBEL_INPUT_BUS_ARSIZE = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARUSER = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARUSER;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARUSER = grp_convolution2D_vert_fu_133_m_axi_input_r_ARUSER;
    end else begin
        XSOBEL_INPUT_BUS_ARUSER = 'bx;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_ARVALID = grp_convolution2D_horiz_fu_144_m_axi_input_r_ARVALID;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_ARVALID = grp_convolution2D_vert_fu_133_m_axi_input_r_ARVALID;
    end else begin
        XSOBEL_INPUT_BUS_ARVALID = 1'b0;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_state3) & (exitcond_fu_165_p2 == 1'b0)) | (1'b1 == ap_CS_fsm_state4))) begin
        XSOBEL_INPUT_BUS_RREADY = grp_convolution2D_horiz_fu_144_m_axi_input_r_RREADY;
    end else if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state6))) begin
        XSOBEL_INPUT_BUS_RREADY = grp_convolution2D_vert_fu_133_m_axi_input_r_RREADY;
    end else begin
        XSOBEL_INPUT_BUS_RREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state7) & (1'b0 == ap_reg_ioackin_XSOBEL_OUTPUT_BUS_AWREADY))) begin
        XSOBEL_OUTPUT_BUS_AWVALID = 1'b1;
    end else begin
        XSOBEL_OUTPUT_BUS_AWVALID = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state13) & ~(XSOBEL_OUTPUT_BUS_BVALID == 1'b0))) begin
        XSOBEL_OUTPUT_BUS_BREADY = 1'b1;
    end else begin
        XSOBEL_OUTPUT_BUS_BREADY = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state8) & (1'b0 == ap_reg_ioackin_XSOBEL_OUTPUT_BUS_WREADY))) begin
        XSOBEL_OUTPUT_BUS_WVALID = 1'b1;
    end else begin
        XSOBEL_OUTPUT_BUS_WVALID = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        XSOBEL_OUTPUT_BUS_blk_n_AW = m_axi_XSOBEL_OUTPUT_BUS_AWREADY;
    end else begin
        XSOBEL_OUTPUT_BUS_blk_n_AW = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state13)) begin
        XSOBEL_OUTPUT_BUS_blk_n_B = m_axi_XSOBEL_OUTPUT_BUS_BVALID;
    end else begin
        XSOBEL_OUTPUT_BUS_blk_n_B = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        XSOBEL_OUTPUT_BUS_blk_n_W = m_axi_XSOBEL_OUTPUT_BUS_WREADY;
    end else begin
        XSOBEL_OUTPUT_BUS_blk_n_W = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_159_p2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_start) & (ap_CS_fsm_state1 == 1'b1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state2) & ~(1'b0 == exitcond1_fu_159_p2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_XSOBEL_OUTPUT_BUS_AWREADY)) begin
        ap_sig_ioackin_XSOBEL_OUTPUT_BUS_AWREADY = XSOBEL_OUTPUT_BUS_AWREADY;
    end else begin
        ap_sig_ioackin_XSOBEL_OUTPUT_BUS_AWREADY = 1'b1;
    end
end

always @ (*) begin
    if ((1'b0 == ap_reg_ioackin_XSOBEL_OUTPUT_BUS_WREADY)) begin
        ap_sig_ioackin_XSOBEL_OUTPUT_BUS_WREADY = XSOBEL_OUTPUT_BUS_WREADY;
    end else begin
        ap_sig_ioackin_XSOBEL_OUTPUT_BUS_WREADY = 1'b1;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (~(ap_start == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (~(1'b0 == exitcond1_fu_159_p2)) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (~(exitcond_fu_165_p2 == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (~(1'b0 == grp_convolution2D_horiz_fu_144_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            if (~(1'b0 == grp_convolution2D_vert_fu_133_ap_done)) begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state7 : begin
            if (~(1'b0 == ap_sig_ioackin_XSOBEL_OUTPUT_BUS_AWREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state8 : begin
            if (~(1'b0 == ap_sig_ioackin_XSOBEL_OUTPUT_BUS_WREADY)) begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            if (~(XSOBEL_OUTPUT_BUS_BVALID == 1'b0)) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state13;
            end
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign abs4_fu_259_p3 = ((abscond3_reg_405[0:0] === 1'b1) ? tmp_3_ext_fu_253_p1 : neg2_cast_fu_256_p1);

assign abs_fu_246_p3 = ((abscond_reg_390[0:0] === 1'b1) ? tmp_2_ext_fu_240_p1 : neg_cast_fu_243_p1);

assign abscond3_fu_234_p2 = (($signed(grp_convolution2D_vert_fu_133_ap_return) > $signed(11'b00000000000)) ? 1'b1 : 1'b0);

assign abscond_fu_219_p2 = (($signed(tmp_2_reg_373) > $signed(11'b00000000000)) ? 1'b1 : 1'b0);

assign ap_CS_fsm_state1 = ap_CS_fsm[ap_const_lv32_0];

assign ap_CS_fsm_state13 = ap_CS_fsm[ap_const_lv32_C];

assign ap_CS_fsm_state2 = ap_CS_fsm[ap_const_lv32_1];

assign ap_CS_fsm_state3 = ap_CS_fsm[ap_const_lv32_2];

assign ap_CS_fsm_state4 = ap_CS_fsm[ap_const_lv32_3];

assign ap_CS_fsm_state5 = ap_CS_fsm[ap_const_lv32_4];

assign ap_CS_fsm_state6 = ap_CS_fsm[ap_const_lv32_5];

assign ap_CS_fsm_state7 = ap_CS_fsm[ap_const_lv32_6];

assign ap_CS_fsm_state8 = ap_CS_fsm[ap_const_lv32_7];

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond1_fu_159_p2 = ((i_reg_109 == ap_const_lv10_3FF) ? 1'b1 : 1'b0);

assign exitcond_fu_165_p2 = ((j_reg_121 == ap_const_lv10_3FF) ? 1'b1 : 1'b0);

assign grp_convolution2D_horiz_fu_144_ap_start = ap_reg_grp_convolution2D_horiz_fu_144_ap_start;

assign grp_convolution2D_vert_fu_133_ap_start = ap_reg_grp_convolution2D_vert_fu_133_ap_start;

assign i_1_fu_198_p2 = (i_reg_109 + ap_const_lv10_1);

assign icmp9_fu_314_p2 = (($signed(tmp_10_fu_304_p4) < $signed(24'b1)) ? 1'b1 : 1'b0);

assign icmp_fu_290_p2 = (($signed(tmp_6_fu_280_p4) > $signed(24'b000000000000000000000000)) ? 1'b1 : 1'b0);

assign j_1_fu_204_p2 = (ap_const_lv10_1 + j_reg_121);

assign neg2_cast_fu_256_p1 = $signed(neg2_reg_400);

assign neg2_fu_228_p2 = ($signed(ap_const_lv13_0) - $signed(neg2_trunc_ext_cast_fu_224_p1));

assign neg2_trunc_ext_cast_fu_224_p1 = $signed(grp_convolution2D_vert_fu_133_ap_return);

assign neg_cast_fu_243_p1 = $signed(neg_reg_385);

assign neg_fu_213_p2 = ($signed(ap_const_lv13_0) - $signed(neg_trunc_ext_cast_fu_210_p1));

assign neg_trunc_ext_cast_fu_210_p1 = $signed(tmp_2_reg_373);

assign output4_sum_cast_fu_188_p1 = $signed(output4_sum_fu_183_p2);

assign output4_sum_fu_183_p2 = ($signed(tmp_10_cast_fu_179_p1) + $signed(tmp_cast_reg_352));

assign res_fu_274_p2 = (abs4_fu_259_p3 + abs_fu_246_p3);

assign tmp_10_cast_fu_179_p1 = tmp_1_fu_171_p3;

assign tmp_10_fu_304_p4 = {{res_fu_274_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_1_fu_171_p3 = {{i_reg_109}, {j_reg_121}};

assign tmp_2_ext_fu_240_p1 = $signed(tmp_2_reg_373);

assign tmp_3_ext_fu_253_p1 = $signed(tmp_3_reg_395);

assign tmp_4_fu_270_p1 = abs_fu_246_p3[7:0];

assign tmp_5_fu_296_p3 = ((icmp_fu_290_p2[0:0] === 1'b1) ? ap_const_lv8_FF : ap_const_lv8_0);

assign tmp_6_fu_280_p4 = {{res_fu_274_p2[ap_const_lv32_1F : ap_const_lv32_8]}};

assign tmp_7_fu_320_p2 = (tmp_4_fu_270_p1 + tmp_fu_266_p1);

assign tmp_8_fu_326_p3 = ((icmp9_fu_314_p2[0:0] === 1'b1) ? ap_const_lv8_FF : ap_const_lv8_0);

assign tmp_9_fu_334_p2 = (tmp_7_fu_320_p2 & tmp_8_fu_326_p3);

assign tmp_cast_fu_155_p1 = $signed(output_r);

assign tmp_fu_266_p1 = abs4_fu_259_p3[7:0];

assign tmp_s_fu_340_p2 = (tmp_9_fu_334_p2 + tmp_5_fu_296_p3);

endmodule //sobel
